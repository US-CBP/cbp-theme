{"version":3,"sources":["cbp-theme.min.js","cbp-theme.js"],"names":["_typeof","Symbol","iterator","obj","constructor","componentHandler","upgradeDom","optJsClass","optCssClass","upgradeElement","element","upgradeElements","elements","upgradeAllRegistered","registerUpgradedCallback","jsClass","callback","register","config","downgradeElements","nodes","findRegisteredClass_","name","optReplace","i","registeredComponents_","length","className","getUpgradedListOfElement_","dataUpgraded","getAttribute","split","isElementUpgraded_","upgradedList","indexOf","upgradeDomInternal","cssClass","registeredClass","document","querySelectorAll","n","upgradeElementInternal","Element","Error","classesToUpgrade","push","classList","forEach","component","contains","setAttribute","join","instance","classConstructor","componentConfigProperty_","createdComponents_","j","m","callbacks","widget","ev","window","CustomEvent","Event","bubbles","cancelable","createEvent","initEvent","dispatchEvent","upgradeElementsInternal","Array","isArray","item","prototype","slice","call","HTMLElement","children","registerInternal","widgetMissing","newConfig","classAsString","hasOwnProperty","found","registerUpgradedCallbackInternal","regClass","upgradeAllRegisteredInternal","deconstructComponentInternal","componentIndex","splice","upgrades","element_","componentPlace","downgradeNodesInternal","downgradeNode","node","filter","NodeList","Node","ComponentConfigPublic","ComponentConfig","Component","addEventListener","createElement","documentElement","add","MaterialCheckbox","this","init","Constant_","TINY_TIMEOUT","CssClasses_","INPUT","BOX_OUTLINE","FOCUS_HELPER","TICK_OUTLINE","RIPPLE_EFFECT","RIPPLE_IGNORE_EVENTS","RIPPLE_CONTAINER","RIPPLE_CENTER","RIPPLE","IS_FOCUSED","IS_DISABLED","IS_CHECKED","IS_UPGRADED","onChange_","event","updateClasses_","onFocus_","onBlur_","remove","onMouseUp_","blur_","checkDisabled","checkToggleState","setTimeout","inputElement_","blur","bind","checked","disabled","disable","enable","check","uncheck","querySelector","boxOutline","tickContainer","tickOutline","appendChild","rippleContainerElement_","boundRippleMouseUp","ripple","boundInputOnChange","boundInputOnFocus","boundInputOnBlur","boundElementMouseUp","MaterialRadio","JS_RADIO","RADIO_BTN","RADIO_OUTER_CIRCLE","RADIO_INNER_CIRCLE","radios","getElementsByClassName","button","btnElement_","onMouseup_","boundChangeHandler_","boundFocusHandler_","boundBlurHandler_","boundMouseUpHandler_","outerCircle","innerCircle","rippleContainer","MaterialTextfield","maxRows","NO_MAX_ROWS","MAX_ROWS_ATTRIBUTE","LABEL","IS_DIRTY","IS_INVALID","HAS_PLACEHOLDER","onKeyDown_","currentRowCount","target","value","keyCode","preventDefault","onReset_","checkValidity","checkDirty","checkFocus","input_","Boolean","validity","valid","change","label_","hasAttribute","parseInt","isNaN","boundUpdateClassesHandler","boundFocusHandler","boundBlurHandler","boundResetHandler","boundKeyDownHandler","invalid","focus","MaterialDataTable","DATA_TABLE","SELECTABLE","SELECT_ELEMENT","IS_SELECTED","selectRow_","checkbox","row","opt_rows","el","createCheckbox_","label","labelClasses","type","firstHeader","bodyRows","footRows","rows","concat","th","headerCheckbox","parentElement","insertBefore","firstCell","td","parentNode","nodeName","toUpperCase","rowCheckbox","MaterialRipple","INITIAL_SCALE","INITIAL_SIZE","INITIAL_OPACITY","FINAL_OPACITY","FINAL_SCALE","RIPPLE_EFFECT_IGNORE_EVENTS","IS_ANIMATING","IS_VISIBLE","downHandler_","rippleElement_","style","width","height","rect","getBoundingClientRect","boundHeight","boundWidth","rippleSize_","Math","sqrt","ignoringMouseDown_","frameCount","getFrameCount","setFrameCount","x","y","bound","currentTarget","clientX","clientY","round","touches","left","top","setRippleXY","setRippleStyles","requestAnimationFrame","animFrameHandler","upHandler_","detail","recentering","frameCount_","x_","y_","boundDownHandler","boundUpHandler","fC","getRippleElement","newX","newY","start","transformString","scale","size","offset","webkitTransform","msTransform","transform","MaterialSelectfield","SELECT","select_","mdlDowngrade_","removeEventListener","$","each","idx","val","attrOptions","attr","replace","RegExp","dataoptions","parseJSON","template","updateChar","currentLength","limit","parent","find","html","keypress","on","datepicker","oldGoToToday","_gotoToday","id","_selectDate","factory","define","amd","exports","module","require","jQuery","inputmask","defaults","get","placeholderCheckDirty","addClass","extend","aliases","mdl-textfield-default","showMaskOnHover","onKeyDown","mdl-textfield-default-placeholder","onBeforeMask","mdl-mask-datepicker","alias","mask","placeholder","mdl-mask-datepicker-placeholder","fn","lastPosition","currentPosition","scrollTop","removeClass","getDirty","undefined","option","action"],"mappings":"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","file":"cbp-theme.min.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A component handler interface using the revealing module design pattern.\n * More details on this design pattern here:\n * https://github.com/jasonmayes/mdl-component-design-pattern\n *\n * @author Jason Mayes.\n */\n/* exported componentHandler */\n\n// Pre-defining the componentHandler interface, for closure documentation and\n// static verification.\nvar componentHandler = {\n  /**\n   * Searches existing DOM for elements of our component type and upgrades them\n   * if they have not already been upgraded.\n   *\n   * @param {string=} optJsClass the programatic name of the element class we\n   * need to create a new instance of.\n   * @param {string=} optCssClass the name of the CSS class elements of this\n   * type will have.\n   */\n  upgradeDom: function upgradeDom(optJsClass, optCssClass) {},\n  /**\n   * Upgrades a specific element rather than all in the DOM.\n   *\n   * @param {!Element} element The element we wish to upgrade.\n   * @param {string=} optJsClass Optional name of the class we want to upgrade\n   * the element to.\n   */\n  upgradeElement: function upgradeElement(element, optJsClass) {},\n  /**\n   * Upgrades a specific list of elements rather than all in the DOM.\n   *\n   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements\n   * The elements we wish to upgrade.\n   */\n  upgradeElements: function upgradeElements(elements) {},\n  /**\n   * Upgrades all registered components found in the current DOM. This is\n   * automatically called on window load.\n   */\n  upgradeAllRegistered: function upgradeAllRegistered() {},\n  /**\n   * Allows user to be alerted to any upgrades that are performed for a given\n   * component type\n   *\n   * @param {string} jsClass The class name of the MDL component we wish\n   * to hook into for any upgrades performed.\n   * @param {function(!HTMLElement)} callback The function to call upon an\n   * upgrade. This function should expect 1 parameter - the HTMLElement which\n   * got upgraded.\n   */\n  registerUpgradedCallback: function registerUpgradedCallback(jsClass, callback) {},\n  /**\n   * Registers a class for future use and attempts to upgrade existing DOM.\n   *\n   * @param {componentHandler.ComponentConfigPublic} config the registration configuration\n   */\n  register: function register(config) {},\n  /**\n   * Downgrade either a given node, an array of nodes, or a NodeList.\n   *\n   * @param {!Node|!Array<!Node>|!NodeList} nodes\n   */\n  downgradeElements: function downgradeElements(nodes) {}\n};\n\ncomponentHandler = function () {\n  'use strict';\n\n  /** @type {!Array<componentHandler.ComponentConfig>} */\n\n  var registeredComponents_ = [];\n\n  /** @type {!Array<componentHandler.Component>} */\n  var createdComponents_ = [];\n\n  var componentConfigProperty_ = 'mdlComponentConfigInternal_';\n\n  /**\n   * Searches registered components for a class we are interested in using.\n   * Optionally replaces a match with passed object if specified.\n   *\n   * @param {string} name The name of a class we want to use.\n   * @param {componentHandler.ComponentConfig=} optReplace Optional object to replace match with.\n   * @return {!Object|boolean}\n   * @private\n   */\n  function findRegisteredClass_(name, optReplace) {\n    for (var i = 0; i < registeredComponents_.length; i++) {\n      if (registeredComponents_[i].className === name) {\n        if (typeof optReplace !== 'undefined') {\n          registeredComponents_[i] = optReplace;\n        }\n        return registeredComponents_[i];\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns an array of the classNames of the upgraded classes on the element.\n   *\n   * @param {!Element} element The element to fetch data from.\n   * @return {!Array<string>}\n   * @private\n   */\n  function getUpgradedListOfElement_(element) {\n    var dataUpgraded = element.getAttribute('data-upgraded');\n    // Use `['']` as default value to conform the `,name,name...` style.\n    return dataUpgraded === null ? [''] : dataUpgraded.split(',');\n  }\n\n  /**\n   * Returns true if the given element has already been upgraded for the given\n   * class.\n   *\n   * @param {!Element} element The element we want to check.\n   * @param {string} jsClass The class to check for.\n   * @returns {boolean}\n   * @private\n   */\n  function isElementUpgraded_(element, jsClass) {\n    var upgradedList = getUpgradedListOfElement_(element);\n    return upgradedList.indexOf(jsClass) !== -1;\n  }\n\n  /**\n   * Searches existing DOM for elements of our component type and upgrades them\n   * if they have not already been upgraded.\n   *\n   * @param {string=} optJsClass the programatic name of the element class we\n   * need to create a new instance of.\n   * @param {string=} optCssClass the name of the CSS class elements of this\n   * type will have.\n   */\n  function upgradeDomInternal(optJsClass, optCssClass) {\n    if (typeof optJsClass === 'undefined' && typeof optCssClass === 'undefined') {\n      for (var i = 0; i < registeredComponents_.length; i++) {\n        upgradeDomInternal(registeredComponents_[i].className, registeredComponents_[i].cssClass);\n      }\n    } else {\n      var jsClass = /** @type {string} */optJsClass;\n      if (typeof optCssClass === 'undefined') {\n        var registeredClass = findRegisteredClass_(jsClass);\n        if (registeredClass) {\n          optCssClass = registeredClass.cssClass;\n        }\n      }\n\n      var elements = document.querySelectorAll('.' + optCssClass);\n      for (var n = 0; n < elements.length; n++) {\n        upgradeElementInternal(elements[n], jsClass);\n      }\n    }\n  }\n\n  /**\n   * Upgrades a specific element rather than all in the DOM.\n   *\n   * @param {!Element} element The element we wish to upgrade.\n   * @param {string=} optJsClass Optional name of the class we want to upgrade\n   * the element to.\n   */\n  function upgradeElementInternal(element, optJsClass) {\n    // Verify argument type.\n    if (!((typeof element === 'undefined' ? 'undefined' : _typeof(element)) === 'object' && element instanceof Element)) {\n      throw new Error('Invalid argument provided to upgrade MDL element.');\n    }\n    var upgradedList = getUpgradedListOfElement_(element);\n    var classesToUpgrade = [];\n    // If jsClass is not provided scan the registered components to find the\n    // ones matching the element's CSS classList.\n    if (!optJsClass) {\n      var classList = element.classList;\n      registeredComponents_.forEach(function (component) {\n        // Match CSS & Not to be upgraded & Not upgraded.\n        if (classList.contains(component.cssClass) && classesToUpgrade.indexOf(component) === -1 && !isElementUpgraded_(element, component.className)) {\n          classesToUpgrade.push(component);\n        }\n      });\n    } else if (!isElementUpgraded_(element, optJsClass)) {\n      classesToUpgrade.push(findRegisteredClass_(optJsClass));\n    }\n\n    // Upgrade the element for each classes.\n    for (var i = 0, n = classesToUpgrade.length, registeredClass; i < n; i++) {\n      registeredClass = classesToUpgrade[i];\n      if (registeredClass) {\n        // Mark element as upgraded.\n        upgradedList.push(registeredClass.className);\n        element.setAttribute('data-upgraded', upgradedList.join(','));\n        var instance = new registeredClass.classConstructor(element);\n        instance[componentConfigProperty_] = registeredClass;\n        createdComponents_.push(instance);\n        // Call any callbacks the user has registered with this component type.\n        for (var j = 0, m = registeredClass.callbacks.length; j < m; j++) {\n          registeredClass.callbacks[j](element);\n        }\n\n        if (registeredClass.widget) {\n          // Assign per element instance for control over API\n          element[registeredClass.className] = instance;\n        }\n      } else {\n        throw new Error('Unable to find a registered component for the given class.');\n      }\n\n      var ev;\n      if ('CustomEvent' in window && typeof window.CustomEvent === 'function') {\n        ev = new Event('mdl-componentupgraded', {\n          'bubbles': true, 'cancelable': false\n        });\n      } else {\n        ev = document.createEvent('Events');\n        ev.initEvent('mdl-componentupgraded', true, true);\n      }\n      element.dispatchEvent(ev);\n    }\n  }\n\n  /**\n   * Upgrades a specific list of elements rather than all in the DOM.\n   *\n   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements\n   * The elements we wish to upgrade.\n   */\n  function upgradeElementsInternal(elements) {\n    if (!Array.isArray(elements)) {\n      if (typeof elements.item === 'function') {\n        elements = Array.prototype.slice.call( /** @type {Array} */elements);\n      } else {\n        elements = [elements];\n      }\n    }\n    for (var i = 0, n = elements.length, element; i < n; i++) {\n      element = elements[i];\n      if (element instanceof HTMLElement) {\n        upgradeElementInternal(element);\n        if (element.children.length > 0) {\n          upgradeElementsInternal(element.children);\n        }\n      }\n    }\n  }\n\n  /**\n   * Registers a class for future use and attempts to upgrade existing DOM.\n   *\n   * @param {componentHandler.ComponentConfigPublic} config\n   */\n  function registerInternal(config) {\n    // In order to support both Closure-compiled and uncompiled code accessing\n    // this method, we need to allow for both the dot and array syntax for\n    // property access. You'll therefore see the `foo.bar || foo['bar']`\n    // pattern repeated across this method.\n    var widgetMissing = typeof config.widget === 'undefined' && typeof config['widget'] === 'undefined';\n    var widget = true;\n\n    if (!widgetMissing) {\n      widget = config.widget || config['widget'];\n    }\n\n    var newConfig = /** @type {componentHandler.ComponentConfig} */{\n      classConstructor: config.constructor || config['constructor'],\n      className: config.classAsString || config['classAsString'],\n      cssClass: config.cssClass || config['cssClass'],\n      widget: widget,\n      callbacks: []\n    };\n\n    registeredComponents_.forEach(function (item) {\n      if (item.cssClass === newConfig.cssClass) {\n        throw new Error('The provided cssClass has already been registered: ' + item.cssClass);\n      }\n      if (item.className === newConfig.className) {\n        throw new Error('The provided className has already been registered');\n      }\n    });\n\n    if (config.constructor.prototype.hasOwnProperty(componentConfigProperty_)) {\n      throw new Error('MDL component classes must not have ' + componentConfigProperty_ + ' defined as a property.');\n    }\n\n    var found = findRegisteredClass_(config.classAsString, newConfig);\n\n    if (!found) {\n      registeredComponents_.push(newConfig);\n    }\n  }\n\n  /**\n   * Allows user to be alerted to any upgrades that are performed for a given\n   * component type\n   *\n   * @param {string} jsClass The class name of the MDL component we wish\n   * to hook into for any upgrades performed.\n   * @param {function(!HTMLElement)} callback The function to call upon an\n   * upgrade. This function should expect 1 parameter - the HTMLElement which\n   * got upgraded.\n   */\n  function registerUpgradedCallbackInternal(jsClass, callback) {\n    var regClass = findRegisteredClass_(jsClass);\n    if (regClass) {\n      regClass.callbacks.push(callback);\n    }\n  }\n\n  /**\n   * Upgrades all registered components found in the current DOM. This is\n   * automatically called on window load.\n   */\n  function upgradeAllRegisteredInternal() {\n    for (var n = 0; n < registeredComponents_.length; n++) {\n      upgradeDomInternal(registeredComponents_[n].className);\n    }\n  }\n\n  /**\n   * Check the component for the downgrade method.\n   * Execute if found.\n   * Remove component from createdComponents list.\n   *\n   * @param {?componentHandler.Component} component\n   */\n  function deconstructComponentInternal(component) {\n    if (component) {\n      var componentIndex = createdComponents_.indexOf(component);\n      createdComponents_.splice(componentIndex, 1);\n\n      var upgrades = component.element_.getAttribute('data-upgraded').split(',');\n      var componentPlace = upgrades.indexOf(component[componentConfigProperty_].classAsString);\n      upgrades.splice(componentPlace, 1);\n      component.element_.setAttribute('data-upgraded', upgrades.join(','));\n\n      var ev;\n      if ('CustomEvent' in window && typeof window.CustomEvent === 'function') {\n        ev = new Event('mdl-componentdowngraded', {\n          'bubbles': true, 'cancelable': false\n        });\n      } else {\n        ev = document.createEvent('Events');\n        ev.initEvent('mdl-componentdowngraded', true, true);\n      }\n    }\n  }\n\n  /**\n   * Downgrade either a given node, an array of nodes, or a NodeList.\n   *\n   * @param {!Node|!Array<!Node>|!NodeList} nodes\n   */\n  function downgradeNodesInternal(nodes) {\n    /**\n     * Auxiliary function to downgrade a single node.\n     * @param  {!Node} node the node to be downgraded\n     */\n    var downgradeNode = function downgradeNode(node) {\n      createdComponents_.filter(function (item) {\n        return item.element_ === node;\n      }).forEach(deconstructComponentInternal);\n    };\n    if (nodes instanceof Array || nodes instanceof NodeList) {\n      for (var n = 0; n < nodes.length; n++) {\n        downgradeNode(nodes[n]);\n      }\n    } else if (nodes instanceof Node) {\n      downgradeNode(nodes);\n    } else {\n      throw new Error('Invalid argument provided to downgrade MDL nodes.');\n    }\n  }\n\n  // Now return the functions that should be made public with their publicly\n  // facing names...\n  return {\n    upgradeDom: upgradeDomInternal,\n    upgradeElement: upgradeElementInternal,\n    upgradeElements: upgradeElementsInternal,\n    upgradeAllRegistered: upgradeAllRegisteredInternal,\n    registerUpgradedCallback: registerUpgradedCallbackInternal,\n    register: registerInternal,\n    downgradeElements: downgradeNodesInternal\n  };\n}();\n\n/**\n * Describes the type of a registered component type managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   constructor: Function,\n *   classAsString: string,\n *   cssClass: string,\n *   widget: (string|boolean|undefined)\n * }}\n */\ncomponentHandler.ComponentConfigPublic; // jshint ignore:line\n\n/**\n * Describes the type of a registered component type managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   constructor: !Function,\n *   className: string,\n *   cssClass: string,\n *   widget: (string|boolean),\n *   callbacks: !Array<function(!HTMLElement)>\n * }}\n */\ncomponentHandler.ComponentConfig; // jshint ignore:line\n\n/**\n * Created component (i.e., upgraded element) type as managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   element_: !HTMLElement,\n *   className: string,\n *   classAsString: string,\n *   cssClass: string,\n *   widget: string\n * }}\n */\ncomponentHandler.Component; // jshint ignore:line\n\n// Export all symbols, for the benefit of Closure compiler.\n// No effect on uncompiled code.\ncomponentHandler['upgradeDom'] = componentHandler.upgradeDom;\ncomponentHandler['upgradeElement'] = componentHandler.upgradeElement;\ncomponentHandler['upgradeElements'] = componentHandler.upgradeElements;\ncomponentHandler['upgradeAllRegistered'] = componentHandler.upgradeAllRegistered;\ncomponentHandler['registerUpgradedCallback'] = componentHandler.registerUpgradedCallback;\ncomponentHandler['register'] = componentHandler.register;\ncomponentHandler['downgradeElements'] = componentHandler.downgradeElements;\nwindow.componentHandler = componentHandler;\nwindow['componentHandler'] = componentHandler;\n\nwindow.addEventListener('load', function () {\n  'use strict';\n\n  /**\n   * Performs a \"Cutting the mustard\" test. If the browser supports the features\n   * tested, adds a mdl-js class to the <html> element. It then upgrades all MDL\n   * components requiring JavaScript.\n   */\n\n  if ('classList' in document.createElement('div') && 'querySelector' in document && 'addEventListener' in window && Array.prototype.forEach) {\n    document.documentElement.classList.add('mdl-js');\n    componentHandler.upgradeAllRegistered();\n  } else {\n    /**\n     * Dummy function to avoid JS errors.\n     */\n    componentHandler.upgradeElement = function () {};\n    /**\n     * Dummy function to avoid JS errors.\n     */\n    componentHandler.register = function () {};\n  }\n});\n\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function () {\n  'use strict';\n\n  /**\n   * Class constructor for Checkbox MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\n\n  var MaterialCheckbox = function MaterialCheckbox(element) {\n    this.element_ = element;\n\n    // Initialize instance.\n    this.init();\n  };\n  window['MaterialCheckbox'] = MaterialCheckbox;\n\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n  MaterialCheckbox.prototype.Constant_ = {\n    TINY_TIMEOUT: 0.001\n  };\n\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n  MaterialCheckbox.prototype.CssClasses_ = {\n    INPUT: 'mdl-checkbox__input',\n    BOX_OUTLINE: 'mdl-checkbox__box-outline',\n    FOCUS_HELPER: 'mdl-checkbox__focus-helper',\n    TICK_OUTLINE: 'mdl-checkbox__tick-outline',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-checkbox__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked',\n    IS_UPGRADED: 'is-upgraded'\n  };\n\n  /**\n   * Handle change of state.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialCheckbox.prototype.onChange_ = function (event) {\n    this.updateClasses_();\n  };\n\n  /**\n   * Handle focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialCheckbox.prototype.onFocus_ = function (event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle lost focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialCheckbox.prototype.onBlur_ = function (event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle mouseup.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialCheckbox.prototype.onMouseUp_ = function (event) {\n    this.blur_();\n  };\n\n  /**\n   * Handle class updates.\n   *\n   * @private\n   */\n  MaterialCheckbox.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n  };\n\n  /**\n   * Add blur.\n   *\n   * @private\n   */\n  MaterialCheckbox.prototype.blur_ = function () {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n      this.inputElement_.blur();\n    }.bind(this), /** @type {number} */this.Constant_.TINY_TIMEOUT);\n  };\n\n  // Public methods.\n\n  /**\n   * Check the inputs toggle state and update display.\n   *\n   * @public\n   */\n  MaterialCheckbox.prototype.checkToggleState = function () {\n    if (this.inputElement_.checked) {\n      this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n  };\n  MaterialCheckbox.prototype['checkToggleState'] = MaterialCheckbox.prototype.checkToggleState;\n\n  /**\n   * Check the inputs disabled state and update display.\n   *\n   * @public\n   */\n  MaterialCheckbox.prototype.checkDisabled = function () {\n    if (this.inputElement_.disabled) {\n      this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n  };\n  MaterialCheckbox.prototype['checkDisabled'] = MaterialCheckbox.prototype.checkDisabled;\n\n  /**\n   * Disable checkbox.\n   *\n   * @public\n   */\n  MaterialCheckbox.prototype.disable = function () {\n    this.inputElement_.disabled = true;\n    this.updateClasses_();\n  };\n  MaterialCheckbox.prototype['disable'] = MaterialCheckbox.prototype.disable;\n\n  /**\n   * Enable checkbox.\n   *\n   * @public\n   */\n  MaterialCheckbox.prototype.enable = function () {\n    this.inputElement_.disabled = false;\n    this.updateClasses_();\n  };\n  MaterialCheckbox.prototype['enable'] = MaterialCheckbox.prototype.enable;\n\n  /**\n   * Check checkbox.\n   *\n   * @public\n   */\n  MaterialCheckbox.prototype.check = function () {\n    this.inputElement_.checked = true;\n    this.updateClasses_();\n  };\n  MaterialCheckbox.prototype['check'] = MaterialCheckbox.prototype.check;\n\n  /**\n   * Uncheck checkbox.\n   *\n   * @public\n   */\n  MaterialCheckbox.prototype.uncheck = function () {\n    this.inputElement_.checked = false;\n    this.updateClasses_();\n  };\n  MaterialCheckbox.prototype['uncheck'] = MaterialCheckbox.prototype.uncheck;\n\n  /**\n   * Initialize element.\n   */\n  MaterialCheckbox.prototype.init = function () {\n    if (this.element_) {\n      this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n\n      var boxOutline = document.createElement('span');\n      boxOutline.classList.add(this.CssClasses_.BOX_OUTLINE);\n\n      var tickContainer = document.createElement('span');\n      tickContainer.classList.add(this.CssClasses_.FOCUS_HELPER);\n\n      var tickOutline = document.createElement('span');\n      tickOutline.classList.add(this.CssClasses_.TICK_OUTLINE);\n\n      boxOutline.appendChild(tickOutline);\n\n      this.element_.appendChild(tickContainer);\n      this.element_.appendChild(boxOutline);\n\n      if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n        this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n        this.rippleContainerElement_ = document.createElement('span');\n        this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n        this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n        this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\n        this.boundRippleMouseUp = this.onMouseUp_.bind(this);\n        this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);\n\n        var ripple = document.createElement('span');\n        ripple.classList.add(this.CssClasses_.RIPPLE);\n\n        this.rippleContainerElement_.appendChild(ripple);\n        this.element_.appendChild(this.rippleContainerElement_);\n      }\n      this.boundInputOnChange = this.onChange_.bind(this);\n      this.boundInputOnFocus = this.onFocus_.bind(this);\n      this.boundInputOnBlur = this.onBlur_.bind(this);\n      this.boundElementMouseUp = this.onMouseUp_.bind(this);\n      this.inputElement_.addEventListener('change', this.boundInputOnChange);\n      this.inputElement_.addEventListener('focus', this.boundInputOnFocus);\n      this.inputElement_.addEventListener('blur', this.boundInputOnBlur);\n      this.element_.addEventListener('mouseup', this.boundElementMouseUp);\n\n      this.updateClasses_();\n      this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialCheckbox,\n    classAsString: 'MaterialCheckbox',\n    cssClass: 'mdl-js-checkbox',\n    widget: true\n  });\n})();\n\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function () {\n  'use strict';\n\n  /**\n   * Class constructor for Radio MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\n\n  var MaterialRadio = function MaterialRadio(element) {\n    this.element_ = element;\n\n    // Initialize instance.\n    this.init();\n  };\n  window['MaterialRadio'] = MaterialRadio;\n\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n  MaterialRadio.prototype.Constant_ = {\n    TINY_TIMEOUT: 0.001\n  };\n\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n  MaterialRadio.prototype.CssClasses_ = {\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked',\n    IS_UPGRADED: 'is-upgraded',\n    JS_RADIO: 'mdl-js-radio',\n    RADIO_BTN: 'mdl-radio__button',\n    RADIO_OUTER_CIRCLE: 'mdl-radio__outer-circle',\n    RADIO_INNER_CIRCLE: 'mdl-radio__inner-circle',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-radio__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple'\n  };\n\n  /**\n   * Handle change of state.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialRadio.prototype.onChange_ = function (event) {\n    // Since other radio buttons don't get change events, we need to look for\n    // them to update their classes.\n    var radios = document.getElementsByClassName(this.CssClasses_.JS_RADIO);\n    for (var i = 0; i < radios.length; i++) {\n      var button = radios[i].querySelector('.' + this.CssClasses_.RADIO_BTN);\n      // Different name == different group, so no point updating those.\n      if (button.getAttribute('name') === this.btnElement_.getAttribute('name')) {\n        radios[i]['MaterialRadio'].updateClasses_();\n      }\n    }\n  };\n\n  /**\n   * Handle focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialRadio.prototype.onFocus_ = function (event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle lost focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialRadio.prototype.onBlur_ = function (event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle mouseup.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialRadio.prototype.onMouseup_ = function (event) {\n    this.blur_();\n  };\n\n  /**\n   * Update classes.\n   *\n   * @private\n   */\n  MaterialRadio.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n  };\n\n  /**\n   * Add blur.\n   *\n   * @private\n   */\n  MaterialRadio.prototype.blur_ = function () {\n\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n      this.btnElement_.blur();\n    }.bind(this), /** @type {number} */this.Constant_.TINY_TIMEOUT);\n  };\n\n  // Public methods.\n\n  /**\n   * Check the components disabled state.\n   *\n   * @public\n   */\n  MaterialRadio.prototype.checkDisabled = function () {\n    if (this.btnElement_.disabled) {\n      this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n  };\n  MaterialRadio.prototype['checkDisabled'] = MaterialRadio.prototype.checkDisabled;\n\n  /**\n   * Check the components toggled state.\n   *\n   * @public\n   */\n  MaterialRadio.prototype.checkToggleState = function () {\n    if (this.btnElement_.checked) {\n      this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n  };\n  MaterialRadio.prototype['checkToggleState'] = MaterialRadio.prototype.checkToggleState;\n\n  /**\n   * Disable radio.\n   *\n   * @public\n   */\n  MaterialRadio.prototype.disable = function () {\n    this.btnElement_.disabled = true;\n    this.updateClasses_();\n  };\n  MaterialRadio.prototype['disable'] = MaterialRadio.prototype.disable;\n\n  /**\n   * Enable radio.\n   *\n   * @public\n   */\n  MaterialRadio.prototype.enable = function () {\n    this.btnElement_.disabled = false;\n    this.updateClasses_();\n  };\n  MaterialRadio.prototype['enable'] = MaterialRadio.prototype.enable;\n\n  /**\n   * Check radio.\n   *\n   * @public\n   */\n  MaterialRadio.prototype.check = function () {\n    this.btnElement_.checked = true;\n    this.updateClasses_();\n  };\n  MaterialRadio.prototype['check'] = MaterialRadio.prototype.check;\n\n  /**\n   * Uncheck radio.\n   *\n   * @public\n   */\n  MaterialRadio.prototype.uncheck = function () {\n    this.btnElement_.checked = false;\n    this.updateClasses_();\n  };\n  MaterialRadio.prototype['uncheck'] = MaterialRadio.prototype.uncheck;\n\n  /**\n   * Initialize element.\n   */\n  MaterialRadio.prototype.init = function () {\n    if (this.element_) {\n      this.btnElement_ = this.element_.querySelector('.' + this.CssClasses_.RADIO_BTN);\n\n      this.boundChangeHandler_ = this.onChange_.bind(this);\n      this.boundFocusHandler_ = this.onChange_.bind(this);\n      this.boundBlurHandler_ = this.onBlur_.bind(this);\n      this.boundMouseUpHandler_ = this.onMouseup_.bind(this);\n\n      var outerCircle = document.createElement('span');\n      outerCircle.classList.add(this.CssClasses_.RADIO_OUTER_CIRCLE);\n\n      var innerCircle = document.createElement('span');\n      innerCircle.classList.add(this.CssClasses_.RADIO_INNER_CIRCLE);\n\n      this.element_.appendChild(outerCircle);\n      this.element_.appendChild(innerCircle);\n\n      var rippleContainer;\n      if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n        this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n        rippleContainer = document.createElement('span');\n        rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n        rippleContainer.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n        rippleContainer.classList.add(this.CssClasses_.RIPPLE_CENTER);\n        rippleContainer.addEventListener('mouseup', this.boundMouseUpHandler_);\n\n        var ripple = document.createElement('span');\n        ripple.classList.add(this.CssClasses_.RIPPLE);\n\n        rippleContainer.appendChild(ripple);\n        this.element_.appendChild(rippleContainer);\n      }\n\n      this.btnElement_.addEventListener('change', this.boundChangeHandler_);\n      this.btnElement_.addEventListener('focus', this.boundFocusHandler_);\n      this.btnElement_.addEventListener('blur', this.boundBlurHandler_);\n      this.element_.addEventListener('mouseup', this.boundMouseUpHandler_);\n\n      this.updateClasses_();\n      this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialRadio,\n    classAsString: 'MaterialRadio',\n    cssClass: 'mdl-js-radio',\n    widget: true\n  });\n})();\n\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function () {\n  'use strict';\n\n  /**\n   * Class constructor for Textfield MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\n\n  var MaterialTextfield = function MaterialTextfield(element) {\n    this.element_ = element;\n    this.maxRows = this.Constant_.NO_MAX_ROWS;\n    // Initialize instance.\n    this.init();\n  };\n  window['MaterialTextfield'] = MaterialTextfield;\n\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n  MaterialTextfield.prototype.Constant_ = {\n    NO_MAX_ROWS: -1,\n    MAX_ROWS_ATTRIBUTE: 'maxrows'\n  };\n\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n  MaterialTextfield.prototype.CssClasses_ = {\n    LABEL: 'mdl-textfield__label',\n    INPUT: 'mdl-textfield__input',\n    IS_DIRTY: 'is-dirty',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_INVALID: 'is-invalid',\n    IS_UPGRADED: 'is-upgraded',\n    HAS_PLACEHOLDER: 'has-placeholder'\n  };\n\n  /**\n   * Handle input being entered.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialTextfield.prototype.onKeyDown_ = function (event) {\n    var currentRowCount = event.target.value.split('\\n').length;\n    if (event.keyCode === 13) {\n      if (currentRowCount >= this.maxRows) {\n        event.preventDefault();\n      }\n    }\n  };\n\n  /**\n   * Handle focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialTextfield.prototype.onFocus_ = function (event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle lost focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialTextfield.prototype.onBlur_ = function (event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle reset event from out side.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialTextfield.prototype.onReset_ = function (event) {\n    this.updateClasses_();\n  };\n\n  /**\n   * Handle class updates.\n   *\n   * @private\n   */\n  MaterialTextfield.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkValidity();\n    this.checkDirty();\n    this.checkFocus();\n  };\n\n  // Public methods.\n\n  /**\n   * Check the disabled state and update field accordingly.\n   *\n   * @public\n   */\n  MaterialTextfield.prototype.checkDisabled = function () {\n    if (this.input_.disabled) {\n      this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n  };\n  MaterialTextfield.prototype['checkDisabled'] = MaterialTextfield.prototype.checkDisabled;\n\n  /**\n  * Check the focus state and update field accordingly.\n  *\n  * @public\n  */\n  MaterialTextfield.prototype.checkFocus = function () {\n    if (Boolean(this.element_.querySelector(':focus'))) {\n      this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n    }\n  };\n  MaterialTextfield.prototype['checkFocus'] = MaterialTextfield.prototype.checkFocus;\n\n  /**\n   * Check the validity state and update field accordingly.\n   *\n   * @public\n   */\n  MaterialTextfield.prototype.checkValidity = function () {\n    if (this.input_.validity) {\n      if (this.input_.validity.valid) {\n        this.element_.classList.remove(this.CssClasses_.IS_INVALID);\n      } else {\n        this.element_.classList.add(this.CssClasses_.IS_INVALID);\n      }\n    }\n  };\n  MaterialTextfield.prototype['checkValidity'] = MaterialTextfield.prototype.checkValidity;\n\n  /**\n   * Check the dirty state and update field accordingly.\n   *\n   * @public\n   */\n  MaterialTextfield.prototype.checkDirty = function () {\n    if (this.input_.value && this.input_.value.length > 0) {\n      this.element_.classList.add(this.CssClasses_.IS_DIRTY);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_DIRTY);\n    }\n  };\n  MaterialTextfield.prototype['checkDirty'] = MaterialTextfield.prototype.checkDirty;\n\n  /**\n   * Disable text field.\n   *\n   * @public\n   */\n  MaterialTextfield.prototype.disable = function () {\n    this.input_.disabled = true;\n    this.updateClasses_();\n  };\n  MaterialTextfield.prototype['disable'] = MaterialTextfield.prototype.disable;\n\n  /**\n   * Enable text field.\n   *\n   * @public\n   */\n  MaterialTextfield.prototype.enable = function () {\n    this.input_.disabled = false;\n    this.updateClasses_();\n  };\n  MaterialTextfield.prototype['enable'] = MaterialTextfield.prototype.enable;\n\n  /**\n   * Update text field value.\n   *\n   * @param {string} value The value to which to set the control (optional).\n   * @public\n   */\n  MaterialTextfield.prototype.change = function (value) {\n\n    this.input_.value = value || '';\n    this.updateClasses_();\n  };\n  MaterialTextfield.prototype['change'] = MaterialTextfield.prototype.change;\n\n  /**\n   * Initialize element.\n   */\n  MaterialTextfield.prototype.init = function () {\n\n    if (this.element_) {\n      this.label_ = this.element_.querySelector('.' + this.CssClasses_.LABEL);\n      this.input_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n\n      if (this.input_) {\n        if (this.input_.hasAttribute(\n        /** @type {string} */this.Constant_.MAX_ROWS_ATTRIBUTE)) {\n          this.maxRows = parseInt(this.input_.getAttribute(\n          /** @type {string} */this.Constant_.MAX_ROWS_ATTRIBUTE), 10);\n          if (isNaN(this.maxRows)) {\n            this.maxRows = this.Constant_.NO_MAX_ROWS;\n          }\n        }\n\n        if (this.input_.hasAttribute('placeholder')) {\n          this.element_.classList.add(this.CssClasses_.HAS_PLACEHOLDER);\n        }\n\n        this.boundUpdateClassesHandler = this.updateClasses_.bind(this);\n        this.boundFocusHandler = this.onFocus_.bind(this);\n        this.boundBlurHandler = this.onBlur_.bind(this);\n        this.boundResetHandler = this.onReset_.bind(this);\n        this.input_.addEventListener('input', this.boundUpdateClassesHandler);\n        this.input_.addEventListener('focus', this.boundFocusHandler);\n        this.input_.addEventListener('blur', this.boundBlurHandler);\n        this.input_.addEventListener('reset', this.boundResetHandler);\n\n        if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {\n          // TODO: This should handle pasting multi line text.\n          // Currently doesn't.\n          this.boundKeyDownHandler = this.onKeyDown_.bind(this);\n          this.input_.addEventListener('keydown', this.boundKeyDownHandler);\n        }\n        var invalid = this.element_.classList.contains(this.CssClasses_.IS_INVALID);\n        this.updateClasses_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n        if (invalid) {\n          this.element_.classList.add(this.CssClasses_.IS_INVALID);\n        }\n        if (this.input_.hasAttribute('autofocus')) {\n          this.element_.focus();\n          this.checkFocus();\n        }\n      }\n    }\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialTextfield,\n    classAsString: 'MaterialTextfield',\n    cssClass: 'mdl-js-textfield',\n    widget: true\n  });\n})();\n\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function () {\n  'use strict';\n\n  /**\n   * Class constructor for Data Table Card MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {Element} element The element that will be upgraded.\n   */\n\n  var MaterialDataTable = function MaterialDataTable(element) {\n    this.element_ = element;\n\n    // Initialize instance.\n    this.init();\n  };\n\n  window['MaterialDataTable'] = MaterialDataTable;\n\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n  MaterialDataTable.prototype.Constant_ = {\n    // None at the moment.\n  };\n\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n  MaterialDataTable.prototype.CssClasses_ = {\n    DATA_TABLE: 'mdl-data-table',\n    SELECTABLE: 'mdl-data-table--selectable',\n    SELECT_ELEMENT: 'mdl-data-table__select',\n    IS_SELECTED: 'is-selected',\n    IS_UPGRADED: 'is-upgraded'\n  };\n\n  /**\n   * Generates and returns a function that toggles the selection state of a\n   * single row (or multiple rows).\n   *\n   * @param {Element} checkbox Checkbox that toggles the selection state.\n   * @param {Element} row Row to toggle when checkbox changes.\n   * @param {(Array<Object>|NodeList)=} opt_rows Rows to toggle when checkbox changes.\n   * @private\n   */\n  MaterialDataTable.prototype.selectRow_ = function (checkbox, row, opt_rows) {\n    if (row) {\n      return function () {\n        if (checkbox.checked) {\n          row.classList.add(this.CssClasses_.IS_SELECTED);\n        } else {\n          row.classList.remove(this.CssClasses_.IS_SELECTED);\n        }\n      }.bind(this);\n    }\n\n    if (opt_rows) {\n      return function () {\n        var i;\n        var el;\n        if (checkbox.checked) {\n          for (i = 0; i < opt_rows.length; i++) {\n            el = opt_rows[i].querySelector('td').querySelector('.mdl-checkbox');\n            el['MaterialCheckbox'].check();\n            opt_rows[i].classList.add(this.CssClasses_.IS_SELECTED);\n          }\n        } else {\n          for (i = 0; i < opt_rows.length; i++) {\n            el = opt_rows[i].querySelector('td').querySelector('.mdl-checkbox');\n            el['MaterialCheckbox'].uncheck();\n            opt_rows[i].classList.remove(this.CssClasses_.IS_SELECTED);\n          }\n        }\n      }.bind(this);\n    }\n  };\n\n  /**\n   * Creates a checkbox for a single or or multiple rows and hooks up the\n   * event handling.\n   *\n   * @param {Element} row Row to toggle when checkbox changes.\n   * @param {(Array<Object>|NodeList)=} opt_rows Rows to toggle when checkbox changes.\n   * @private\n   */\n  MaterialDataTable.prototype.createCheckbox_ = function (row, opt_rows) {\n    var label = document.createElement('label');\n    var labelClasses = ['mdl-checkbox', 'mdl-js-checkbox', 'mdl-js-ripple-effect', this.CssClasses_.SELECT_ELEMENT];\n    label.className = labelClasses.join(' ');\n    var checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    checkbox.classList.add('mdl-checkbox__input');\n\n    if (row) {\n      checkbox.checked = row.classList.contains(this.CssClasses_.IS_SELECTED);\n      checkbox.addEventListener('change', this.selectRow_(checkbox, row));\n    } else if (opt_rows) {\n      checkbox.addEventListener('change', this.selectRow_(checkbox, null, opt_rows));\n    }\n\n    label.appendChild(checkbox);\n    componentHandler.upgradeElement(label, 'MaterialCheckbox');\n    return label;\n  };\n\n  /**\n   * Initialize element.\n   */\n  MaterialDataTable.prototype.init = function () {\n    if (this.element_) {\n      var firstHeader = this.element_.querySelector('th');\n      var bodyRows = Array.prototype.slice.call(this.element_.querySelectorAll('tbody tr'));\n      var footRows = Array.prototype.slice.call(this.element_.querySelectorAll('tfoot tr'));\n      var rows = bodyRows.concat(footRows);\n\n      if (this.element_.classList.contains(this.CssClasses_.SELECTABLE)) {\n        var th = document.createElement('th');\n        var headerCheckbox = this.createCheckbox_(null, rows);\n        th.appendChild(headerCheckbox);\n        firstHeader.parentElement.insertBefore(th, firstHeader);\n\n        for (var i = 0; i < rows.length; i++) {\n          var firstCell = rows[i].querySelector('td');\n          if (firstCell) {\n            var td = document.createElement('td');\n            if (rows[i].parentNode.nodeName.toUpperCase() === 'TBODY') {\n              var rowCheckbox = this.createCheckbox_(rows[i]);\n              td.appendChild(rowCheckbox);\n            }\n            rows[i].insertBefore(td, firstCell);\n          }\n        }\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n      }\n    }\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialDataTable,\n    classAsString: 'MaterialDataTable',\n    cssClass: 'mdl-js-data-table'\n  });\n})();\n\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function () {\n  'use strict';\n\n  /**\n   * Class constructor for Ripple MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\n\n  var MaterialRipple = function MaterialRipple(element) {\n    this.element_ = element;\n\n    // Initialize instance.\n    this.init();\n  };\n  window['MaterialRipple'] = MaterialRipple;\n\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n  MaterialRipple.prototype.Constant_ = {\n    INITIAL_SCALE: 'scale(0.0001, 0.0001)',\n    INITIAL_SIZE: '1px',\n    INITIAL_OPACITY: '0.4',\n    FINAL_OPACITY: '0',\n    FINAL_SCALE: ''\n  };\n\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n  MaterialRipple.prototype.CssClasses_ = {\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE: 'mdl-ripple',\n    IS_ANIMATING: 'is-animating',\n    IS_VISIBLE: 'is-visible'\n  };\n\n  /**\n   * Handle mouse / finger down on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialRipple.prototype.downHandler_ = function (event) {\n    if (!this.rippleElement_.style.width && !this.rippleElement_.style.height) {\n      var rect = this.element_.getBoundingClientRect();\n      this.boundHeight = rect.height;\n      this.boundWidth = rect.width;\n      this.rippleSize_ = Math.sqrt(rect.width * rect.width + rect.height * rect.height) * 2 + 2;\n      this.rippleElement_.style.width = this.rippleSize_ + 'px';\n      this.rippleElement_.style.height = this.rippleSize_ + 'px';\n    }\n\n    this.rippleElement_.classList.add(this.CssClasses_.IS_VISIBLE);\n\n    if (event.type === 'mousedown' && this.ignoringMouseDown_) {\n      this.ignoringMouseDown_ = false;\n    } else {\n      if (event.type === 'touchstart') {\n        this.ignoringMouseDown_ = true;\n      }\n      var frameCount = this.getFrameCount();\n      if (frameCount > 0) {\n        return;\n      }\n      this.setFrameCount(1);\n      var bound = event.currentTarget.getBoundingClientRect();\n      var x;\n      var y;\n      // Check if we are handling a keyboard click.\n      if (event.clientX === 0 && event.clientY === 0) {\n        x = Math.round(bound.width / 2);\n        y = Math.round(bound.height / 2);\n      } else {\n        var clientX = event.clientX ? event.clientX : event.touches[0].clientX;\n        var clientY = event.clientY ? event.clientY : event.touches[0].clientY;\n        x = Math.round(clientX - bound.left);\n        y = Math.round(clientY - bound.top);\n      }\n      this.setRippleXY(x, y);\n      this.setRippleStyles(true);\n      window.requestAnimationFrame(this.animFrameHandler.bind(this));\n    }\n  };\n\n  /**\n   * Handle mouse / finger up on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialRipple.prototype.upHandler_ = function (event) {\n    // Don't fire for the artificial \"mouseup\" generated by a double-click.\n    if (event && event.detail !== 2) {\n      // Allow a repaint to occur before removing this class, so the animation\n      // shows for tap events, which seem to trigger a mouseup too soon after\n      // mousedown.\n      window.setTimeout(function () {\n        this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE);\n      }.bind(this), 0);\n    }\n  };\n\n  /**\n   * Initialize element.\n   */\n  MaterialRipple.prototype.init = function () {\n    if (this.element_) {\n      var recentering = this.element_.classList.contains(this.CssClasses_.RIPPLE_CENTER);\n      if (!this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT_IGNORE_EVENTS)) {\n        this.rippleElement_ = this.element_.querySelector('.' + this.CssClasses_.RIPPLE);\n        this.frameCount_ = 0;\n        this.rippleSize_ = 0;\n        this.x_ = 0;\n        this.y_ = 0;\n\n        // Touch start produces a compat mouse down event, which would cause a\n        // second ripples. To avoid that, we use this property to ignore the first\n        // mouse down after a touch start.\n        this.ignoringMouseDown_ = false;\n\n        this.boundDownHandler = this.downHandler_.bind(this);\n        this.element_.addEventListener('mousedown', this.boundDownHandler);\n        this.element_.addEventListener('touchstart', this.boundDownHandler);\n\n        this.boundUpHandler = this.upHandler_.bind(this);\n        this.element_.addEventListener('mouseup', this.boundUpHandler);\n        this.element_.addEventListener('mouseleave', this.boundUpHandler);\n        this.element_.addEventListener('touchend', this.boundUpHandler);\n        this.element_.addEventListener('blur', this.boundUpHandler);\n\n        /**\n         * Getter for frameCount_.\n         * @return {number} the frame count.\n         */\n        this.getFrameCount = function () {\n          return this.frameCount_;\n        };\n\n        /**\n         * Setter for frameCount_.\n         * @param {number} fC the frame count.\n         */\n        this.setFrameCount = function (fC) {\n          this.frameCount_ = fC;\n        };\n\n        /**\n         * Getter for rippleElement_.\n         * @return {Element} the ripple element.\n         */\n        this.getRippleElement = function () {\n          return this.rippleElement_;\n        };\n\n        /**\n         * Sets the ripple X and Y coordinates.\n         * @param  {number} newX the new X coordinate\n         * @param  {number} newY the new Y coordinate\n         */\n        this.setRippleXY = function (newX, newY) {\n          this.x_ = newX;\n          this.y_ = newY;\n        };\n\n        /**\n         * Sets the ripple styles.\n         * @param  {boolean} start whether or not this is the start frame.\n         */\n        this.setRippleStyles = function (start) {\n          if (this.rippleElement_ !== null) {\n            var transformString;\n            var scale;\n            var size;\n            var offset = 'translate(' + this.x_ + 'px, ' + this.y_ + 'px)';\n\n            if (start) {\n              scale = this.Constant_.INITIAL_SCALE;\n              size = this.Constant_.INITIAL_SIZE;\n            } else {\n              scale = this.Constant_.FINAL_SCALE;\n              size = this.rippleSize_ + 'px';\n              if (recentering) {\n                offset = 'translate(' + this.boundWidth / 2 + 'px, ' + this.boundHeight / 2 + 'px)';\n              }\n            }\n\n            transformString = 'translate(-50%, -50%) ' + offset + scale;\n\n            this.rippleElement_.style.webkitTransform = transformString;\n            this.rippleElement_.style.msTransform = transformString;\n            this.rippleElement_.style.transform = transformString;\n\n            if (start) {\n              this.rippleElement_.classList.remove(this.CssClasses_.IS_ANIMATING);\n            } else {\n              this.rippleElement_.classList.add(this.CssClasses_.IS_ANIMATING);\n            }\n          }\n        };\n\n        /**\n         * Handles an animation frame.\n         */\n        this.animFrameHandler = function () {\n          if (this.frameCount_-- > 0) {\n            window.requestAnimationFrame(this.animFrameHandler.bind(this));\n          } else {\n            this.setRippleStyles(false);\n          }\n        };\n      }\n    }\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialRipple,\n    classAsString: 'MaterialRipple',\n    cssClass: 'mdl-js-ripple-effect',\n    widget: false\n  });\n})();\n\n(function () {\n  'use strict';\n\n  /**\n   * Class constructor for Select field MDL component.\n   * Implements custom MDL component design pattern not defined yet.\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\n\n  var MaterialSelectfield = function MaterialSelectfield(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n  };\n  window['MaterialSelectfield'] = MaterialSelectfield;\n\n  MaterialSelectfield.prototype.Constant_ = {\n    // None for now\n  };\n\n  MaterialSelectfield.prototype.CssClasses_ = {\n    LABEL: 'mdl-selectfield__label',\n    SELECT: 'mdl-selectfield__select',\n    IS_DIRTY: 'is-dirty',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_INVALID: 'is-invalid',\n    IS_UPGRADED: 'is-upgraded'\n  };\n\n  /**\n   * Handle focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialSelectfield.prototype.onFocus_ = function (event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle lost focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialSelectfield.prototype.onBlur_ = function (event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle reset event from outside.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialSelectfield.prototype.onReset_ = function (event) {\n    this.updateClasses_();\n  };\n\n  /**\n   * Handle class updates.\n   *\n   * @private\n   */\n  MaterialSelectfield.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkValidity();\n    this.checkDirty();\n  };\n\n  // Public methods.\n\n  /**\n   * Check the disabled state and update field accordingly.\n   *\n   * @public\n   */\n  MaterialSelectfield.prototype.checkDisabled = function () {\n    if (this.select_.disabled) {\n      this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n  };\n  MaterialSelectfield.prototype['checkDisabled'] = MaterialSelectfield.prototype.checkDisabled;\n\n  /**\n   * Check the validity state and update field accordingly.\n   *\n   * @public\n   */\n  MaterialSelectfield.prototype.checkValidity = function () {\n    if (this.select_.validity.valid) {\n      this.element_.classList.remove(this.CssClasses_.IS_INVALID);\n    } else {\n      this.element_.classList.add(this.CssClasses_.IS_INVALID);\n    }\n  };\n  MaterialSelectfield.prototype['checkValidity'] = MaterialSelectfield.prototype.checkValidity;\n\n  /**\n   * Check the dirty state and update field accordingly.\n   *\n   * @public\n   */\n  MaterialSelectfield.prototype.checkDirty = function () {\n    if (this.select_.value && this.select_.value.length > 0) {\n      this.element_.classList.add(this.CssClasses_.IS_DIRTY);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_DIRTY);\n    }\n  };\n  MaterialSelectfield.prototype['checkDirty'] = MaterialSelectfield.prototype.checkDirty;\n\n  /**\n   * Enable select field.\n   *\n   * @public\n   */\n  MaterialSelectfield.prototype.disable = function () {\n    this.select_.disabled = true;\n    this.updateClasses_();\n  };\n  MaterialSelectfield.prototype['disable'] = MaterialSelectfield.prototype.disable;\n\n  /**\n   * Enable select field.\n   *\n   * @public\n   */\n  MaterialSelectfield.prototype.enable = function () {\n    this.select_.disabled = false;\n    this.updateClasses_();\n  };\n  MaterialSelectfield.prototype['enable'] = MaterialSelectfield.prototype.enable;\n\n  /**\n   * Update select field value.\n   *\n   * @param {string} value The value to which to set the control (optional).\n   * @public\n   */\n  MaterialSelectfield.prototype.change = function (value) {\n    if (value) {\n      this.select_.value = value;\n    }\n    this.updateClasses_();\n  };\n  MaterialSelectfield.prototype['change'] = MaterialSelectfield.prototype.change;\n\n  /**\n   * Initialize element.\n   */\n  MaterialSelectfield.prototype.init = function () {\n    if (this.element_) {\n      this.label_ = this.element_.querySelector('.' + this.CssClasses_.LABEL);\n      this.select_ = this.element_.querySelector('.' + this.CssClasses_.SELECT);\n\n      if (this.select_) {\n        this.boundUpdateClassesHandler = this.updateClasses_.bind(this);\n        this.boundFocusHandler = this.onFocus_.bind(this);\n        this.boundBlurHandler = this.onBlur_.bind(this);\n        this.boundResetHandler = this.onReset_.bind(this);\n        this.select_.addEventListener('change', this.boundUpdateClassesHandler);\n        this.select_.addEventListener('focus', this.boundFocusHandler);\n        this.select_.addEventListener('blur', this.boundBlurHandler);\n        this.select_.addEventListener('reset', this.boundResetHandler);\n\n        this.updateClasses_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n      }\n    }\n  };\n\n  /**\n   * Downgrade the component\n   *\n   * @private\n   */\n  MaterialSelectfield.prototype.mdlDowngrade_ = function () {\n    this.select_.removeEventListener('change', this.boundUpdateClassesHandler);\n    this.select_.removeEventListener('focus', this.boundFocusHandler);\n    this.select_.removeEventListener('blur', this.boundBlurHandler);\n    this.select_.removeEventListener('reset', this.boundResetHandler);\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialSelectfield,\n    classAsString: 'MaterialSelectfield',\n    cssClass: 'mdl-js-selectfield',\n    widget: true\n  });\n})();\n\n(function ($) {\n  'use strict';\n  /**\n   *\n   * See room for improvements...CONTRIBUTE, CONTRIBUTE, CONTRIBUTE!\n   * Contact the Common Framework UI Group for more details or see our confluence page.\n   *\n      *\n      * TODO: need to find a way to pass custom templates and allow user to use pass it via data attribute!\n      *\n      * NOTE: babel compiles ES6 string interpolations but backtick is needed!\n   */\n\n  $('[data-charlimit]').each(function (idx, val) {\n    var attrOptions = $(val).attr('data-charlimit');\n    if (attrOptions && attrOptions !== \"\") {\n      (function () {\n        attrOptions = attrOptions.replace(new RegExp(\"'\", \"g\"), '\"');\n        var dataoptions = $.parseJSON(\"{\" + attrOptions + \"}\"),\n            template = dataoptions.template,\n            updateChar = function updateChar(ev) {\n          var currentLength = $(ev.currentTarget).val().length,\n              limit = dataoptions.limit;\n          $(val).parent().find(dataoptions.target).html(template || '<strong> ' + currentLength + '/' + limit + ' </strong> character limit');\n        };\n\n        $(val).keypress(updateChar);\n        $(val).on('paste', updateChar);\n        updateChar({ currentTarget: val });\n      })();\n    }\n  });\n})($);\n\n(function ($) {\n  'use strict';\n  /**\n   *\n   * See room for improvements...CONTRIBUTE, CONTRIBUTE, CONTRIBUTE!\n   * Contact the Common Framework UI Group for more details or see our confluence page.\n   *\n   */\n\n  if ($('.datepicker').length > 0) {\n    if (!$.datepicker) {\n      return false;\n    }\n    var oldGoToToday = $.datepicker._gotoToday;\n    $.datepicker._gotoToday = function (id) {\n      oldGoToToday.call(this, id);\n      this._selectDate(id);\n    };\n  }\n})($);\n\n(function () {\n\n  'use strict';\n\n  !function (factory) {\n    \"function\" == typeof define && define.amd ? define([\"jquery\", \"./jquery.inputmask\"], factory) : \"object\" == (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) ? module.exports = factory(require(\"jquery\"), require(\"./jquery.inputmask\")) : factory(jQuery);\n  }(function ($) {\n\n    if (!$.inputmask || !$.inputmask.defaults) {\n      return false; // fail gracefully\n    }\n\n    var checkDirty = function checkDirty(ev) {\n      //console.info($(ev.target).parent().get(0));\n      //console.info($(ev.target).parent().get(0).MaterialTextfield);\n      if ($(ev.target).parent().get(0).MaterialTextfield) {\n        $(ev.target).parent().get(0).MaterialTextfield.checkDirty();\n      }\n    };\n\n    var placeholderCheckDirty = function placeholderCheckDirty(ev) {\n      var target = ev.target || this;\n      //console.info(target);\n      $(target).focus(function () {\n        //console.info(this);\n        $(this).parent().addClass('is-dirty');\n      }).blur(function () {\n        if ($(target).parent().get(0).MaterialTextfield) {\n          $(target).parent().get(0).MaterialTextfield.checkDirty();\n        }\n      });\n    };\n\n    return $.extend($.inputmask.defaults.aliases, {\n      'mdl-textfield-default': {\n        showMaskOnHover: false,\n        onKeyDown: checkDirty\n      },\n      'mdl-textfield-default-placeholder': {\n        showMaskOnHover: false,\n        onKeyDown: placeholderCheckDirty,\n        onBeforeMask: placeholderCheckDirty\n      },\n      'mdl-mask-datepicker': {\n        alias: 'dd/mm/yyyy', // use one of the predefined inputmasks\n        showMaskOnHover: false,\n        mask: 'm/d/y',\n        placeholder: 'mm/dd/yyyy',\n        onKeyDown: checkDirty\n      },\n      'mdl-mask-datepicker-placeholder': {\n        alias: 'dd/mm/yyyy', // use one of the predefined inputmasks\n        showMaskOnHover: false,\n        mask: 'm/d/y',\n        placeholder: 'mm/dd/yyyy',\n        onKeyDown: placeholderCheckDirty,\n        onBeforeMask: placeholderCheckDirty\n      }\n    }), $.fn.inputmask;\n  });\n})();\n\n(function ($) {\n\n  'use strict';\n\n  var lastPosition = 0;\n\n  $('.cbp-header[role=\"navigation\"]').each(function () {\n    $(window).on('scroll', function () {\n      var currentPosition = $(this).scrollTop();\n\n      if (!lastPosition) {\n        lastPosition = currentPosition;\n        return;\n      }\n\n      if (lastPosition > currentPosition) {\n        $('.cbp-header').removeClass('disappear');\n        $('.app-header').removeClass('top');\n        $('.sidebar').removeClass('after-header').addClass('after-double-header');\n      } else {\n        $('.cbp-header').addClass('disappear');\n        $('.app-header').addClass('top');\n        $('.sidebar').removeClass('after-double-header').addClass('after-header');\n\n        // hida all menu items from the header\n        $('.cbp-header .dropdown.open').removeClass('open');\n        $('.app-header .dropdown.open').removeClass('open');\n      }\n\n      lastPosition = currentPosition;\n    });\n  });\n})($);\n\n(function () {\n  'use strict';\n\n  $('[data-dismiss=\"tag\"]').each(function (idx, el) {\n    $(el).on('click', function (ev) {\n      $(ev.currentTarget.parentElement).remove();\n    });\n  });\n})($);\n\n(function ($) {\n  'use strict';\n  /**\n   *\n   * We currently only support selectize and select2.  If you want more select third party lib support, contribute!!!!!\n   * See room for improvements...CONTRIBUTE, CONTRIBUTE, CONTRIBUTE!\n   * Contact the Common Framework UI Group for more details or see our confluence page.\n   *\n   */\n\n  var getDirty = function getDirty(idx, el) {\n    if (el !== undefined && $(el).children('select').length > 0) {\n      $($(el).children('select').get(0)).change(function (ev) {\n        var option = $(ev.currentTarget).find('option:selected').val();\n        var action = option && option.length > 0 ? 'addClass' : 'removeClass';\n        $(el)[action]('is-dirty');\n      });\n    }\n  };\n  $('.selectize-field').each(getDirty);\n  $('.select2-field').each(getDirty);\n})($);","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A component handler interface using the revealing module design pattern.\n * More details on this design pattern here:\n * https://github.com/jasonmayes/mdl-component-design-pattern\n *\n * @author Jason Mayes.\n */\n/* exported componentHandler */\n\n// Pre-defining the componentHandler interface, for closure documentation and\n// static verification.\nvar componentHandler = {\n  /**\n   * Searches existing DOM for elements of our component type and upgrades them\n   * if they have not already been upgraded.\n   *\n   * @param {string=} optJsClass the programatic name of the element class we\n   * need to create a new instance of.\n   * @param {string=} optCssClass the name of the CSS class elements of this\n   * type will have.\n   */\n  upgradeDom: function(optJsClass, optCssClass) {},\n  /**\n   * Upgrades a specific element rather than all in the DOM.\n   *\n   * @param {!Element} element The element we wish to upgrade.\n   * @param {string=} optJsClass Optional name of the class we want to upgrade\n   * the element to.\n   */\n  upgradeElement: function(element, optJsClass) {},\n  /**\n   * Upgrades a specific list of elements rather than all in the DOM.\n   *\n   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements\n   * The elements we wish to upgrade.\n   */\n  upgradeElements: function(elements) {},\n  /**\n   * Upgrades all registered components found in the current DOM. This is\n   * automatically called on window load.\n   */\n  upgradeAllRegistered: function() {},\n  /**\n   * Allows user to be alerted to any upgrades that are performed for a given\n   * component type\n   *\n   * @param {string} jsClass The class name of the MDL component we wish\n   * to hook into for any upgrades performed.\n   * @param {function(!HTMLElement)} callback The function to call upon an\n   * upgrade. This function should expect 1 parameter - the HTMLElement which\n   * got upgraded.\n   */\n  registerUpgradedCallback: function(jsClass, callback) {},\n  /**\n   * Registers a class for future use and attempts to upgrade existing DOM.\n   *\n   * @param {componentHandler.ComponentConfigPublic} config the registration configuration\n   */\n  register: function(config) {},\n  /**\n   * Downgrade either a given node, an array of nodes, or a NodeList.\n   *\n   * @param {!Node|!Array<!Node>|!NodeList} nodes\n   */\n  downgradeElements: function(nodes) {}\n};\n\ncomponentHandler = (function() {\n  'use strict';\n\n  /** @type {!Array<componentHandler.ComponentConfig>} */\n  var registeredComponents_ = [];\n\n  /** @type {!Array<componentHandler.Component>} */\n  var createdComponents_ = [];\n\n  var componentConfigProperty_ = 'mdlComponentConfigInternal_';\n\n  /**\n   * Searches registered components for a class we are interested in using.\n   * Optionally replaces a match with passed object if specified.\n   *\n   * @param {string} name The name of a class we want to use.\n   * @param {componentHandler.ComponentConfig=} optReplace Optional object to replace match with.\n   * @return {!Object|boolean}\n   * @private\n   */\n  function findRegisteredClass_(name, optReplace) {\n    for (var i = 0; i < registeredComponents_.length; i++) {\n      if (registeredComponents_[i].className === name) {\n        if (typeof optReplace !== 'undefined') {\n          registeredComponents_[i] = optReplace;\n        }\n        return registeredComponents_[i];\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns an array of the classNames of the upgraded classes on the element.\n   *\n   * @param {!Element} element The element to fetch data from.\n   * @return {!Array<string>}\n   * @private\n   */\n  function getUpgradedListOfElement_(element) {\n    var dataUpgraded = element.getAttribute('data-upgraded');\n    // Use `['']` as default value to conform the `,name,name...` style.\n    return dataUpgraded === null ? [''] : dataUpgraded.split(',');\n  }\n\n  /**\n   * Returns true if the given element has already been upgraded for the given\n   * class.\n   *\n   * @param {!Element} element The element we want to check.\n   * @param {string} jsClass The class to check for.\n   * @returns {boolean}\n   * @private\n   */\n  function isElementUpgraded_(element, jsClass) {\n    var upgradedList = getUpgradedListOfElement_(element);\n    return upgradedList.indexOf(jsClass) !== -1;\n  }\n\n  /**\n   * Searches existing DOM for elements of our component type and upgrades them\n   * if they have not already been upgraded.\n   *\n   * @param {string=} optJsClass the programatic name of the element class we\n   * need to create a new instance of.\n   * @param {string=} optCssClass the name of the CSS class elements of this\n   * type will have.\n   */\n  function upgradeDomInternal(optJsClass, optCssClass) {\n    if (typeof optJsClass === 'undefined' &&\n        typeof optCssClass === 'undefined') {\n      for (var i = 0; i < registeredComponents_.length; i++) {\n        upgradeDomInternal(registeredComponents_[i].className,\n            registeredComponents_[i].cssClass);\n      }\n    } else {\n      var jsClass = /** @type {string} */ (optJsClass);\n      if (typeof optCssClass === 'undefined') {\n        var registeredClass = findRegisteredClass_(jsClass);\n        if (registeredClass) {\n          optCssClass = registeredClass.cssClass;\n        }\n      }\n\n      var elements = document.querySelectorAll('.' + optCssClass);\n      for (var n = 0; n < elements.length; n++) {\n        upgradeElementInternal(elements[n], jsClass);\n      }\n    }\n  }\n\n  /**\n   * Upgrades a specific element rather than all in the DOM.\n   *\n   * @param {!Element} element The element we wish to upgrade.\n   * @param {string=} optJsClass Optional name of the class we want to upgrade\n   * the element to.\n   */\n  function upgradeElementInternal(element, optJsClass) {\n    // Verify argument type.\n    if (!(typeof element === 'object' && element instanceof Element)) {\n      throw new Error('Invalid argument provided to upgrade MDL element.');\n    }\n    var upgradedList = getUpgradedListOfElement_(element);\n    var classesToUpgrade = [];\n    // If jsClass is not provided scan the registered components to find the\n    // ones matching the element's CSS classList.\n    if (!optJsClass) {\n      var classList = element.classList;\n      registeredComponents_.forEach(function(component) {\n        // Match CSS & Not to be upgraded & Not upgraded.\n        if (classList.contains(component.cssClass) &&\n            classesToUpgrade.indexOf(component) === -1 &&\n            !isElementUpgraded_(element, component.className)) {\n          classesToUpgrade.push(component);\n        }\n      });\n    } else if (!isElementUpgraded_(element, optJsClass)) {\n      classesToUpgrade.push(findRegisteredClass_(optJsClass));\n    }\n\n    // Upgrade the element for each classes.\n    for (var i = 0, n = classesToUpgrade.length, registeredClass; i < n; i++) {\n      registeredClass = classesToUpgrade[i];\n      if (registeredClass) {\n        // Mark element as upgraded.\n        upgradedList.push(registeredClass.className);\n        element.setAttribute('data-upgraded', upgradedList.join(','));\n        var instance = new registeredClass.classConstructor(element);\n        instance[componentConfigProperty_] = registeredClass;\n        createdComponents_.push(instance);\n        // Call any callbacks the user has registered with this component type.\n        for (var j = 0, m = registeredClass.callbacks.length; j < m; j++) {\n          registeredClass.callbacks[j](element);\n        }\n\n        if (registeredClass.widget) {\n          // Assign per element instance for control over API\n          element[registeredClass.className] = instance;\n        }\n      } else {\n        throw new Error(\n          'Unable to find a registered component for the given class.');\n      }\n\n      var ev;\n      if ('CustomEvent' in window && typeof window.CustomEvent === 'function') {\n        ev = new Event('mdl-componentupgraded', {\n          'bubbles': true, 'cancelable': false\n        });\n      } else {\n        ev = document.createEvent('Events');\n        ev.initEvent('mdl-componentupgraded', true, true);\n      }\n      element.dispatchEvent(ev);\n    }\n  }\n\n  /**\n   * Upgrades a specific list of elements rather than all in the DOM.\n   *\n   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements\n   * The elements we wish to upgrade.\n   */\n  function upgradeElementsInternal(elements) {\n    if (!Array.isArray(elements)) {\n      if (typeof elements.item === 'function') {\n        elements = Array.prototype.slice.call(/** @type {Array} */ (elements));\n      } else {\n        elements = [elements];\n      }\n    }\n    for (var i = 0, n = elements.length, element; i < n; i++) {\n      element = elements[i];\n      if (element instanceof HTMLElement) {\n        upgradeElementInternal(element);\n        if (element.children.length > 0) {\n          upgradeElementsInternal(element.children);\n        }\n      }\n    }\n  }\n\n  /**\n   * Registers a class for future use and attempts to upgrade existing DOM.\n   *\n   * @param {componentHandler.ComponentConfigPublic} config\n   */\n  function registerInternal(config) {\n    // In order to support both Closure-compiled and uncompiled code accessing\n    // this method, we need to allow for both the dot and array syntax for\n    // property access. You'll therefore see the `foo.bar || foo['bar']`\n    // pattern repeated across this method.\n    var widgetMissing = (typeof config.widget === 'undefined' &&\n        typeof config['widget'] === 'undefined');\n    var widget = true;\n\n    if (!widgetMissing) {\n      widget = config.widget || config['widget'];\n    }\n\n    var newConfig = /** @type {componentHandler.ComponentConfig} */ ({\n      classConstructor: config.constructor || config['constructor'],\n      className: config.classAsString || config['classAsString'],\n      cssClass: config.cssClass || config['cssClass'],\n      widget: widget,\n      callbacks: []\n    });\n\n    registeredComponents_.forEach(function(item) {\n      if (item.cssClass === newConfig.cssClass) {\n        throw new Error('The provided cssClass has already been registered: ' + item.cssClass);\n      }\n      if (item.className === newConfig.className) {\n        throw new Error('The provided className has already been registered');\n      }\n    });\n\n    if (config.constructor.prototype\n        .hasOwnProperty(componentConfigProperty_)) {\n      throw new Error(\n          'MDL component classes must not have ' + componentConfigProperty_ +\n          ' defined as a property.');\n    }\n\n    var found = findRegisteredClass_(config.classAsString, newConfig);\n\n    if (!found) {\n      registeredComponents_.push(newConfig);\n    }\n  }\n\n  /**\n   * Allows user to be alerted to any upgrades that are performed for a given\n   * component type\n   *\n   * @param {string} jsClass The class name of the MDL component we wish\n   * to hook into for any upgrades performed.\n   * @param {function(!HTMLElement)} callback The function to call upon an\n   * upgrade. This function should expect 1 parameter - the HTMLElement which\n   * got upgraded.\n   */\n  function registerUpgradedCallbackInternal(jsClass, callback) {\n    var regClass = findRegisteredClass_(jsClass);\n    if (regClass) {\n      regClass.callbacks.push(callback);\n    }\n  }\n\n  /**\n   * Upgrades all registered components found in the current DOM. This is\n   * automatically called on window load.\n   */\n  function upgradeAllRegisteredInternal() {\n    for (var n = 0; n < registeredComponents_.length; n++) {\n      upgradeDomInternal(registeredComponents_[n].className);\n    }\n  }\n\n  /**\n   * Check the component for the downgrade method.\n   * Execute if found.\n   * Remove component from createdComponents list.\n   *\n   * @param {?componentHandler.Component} component\n   */\n  function deconstructComponentInternal(component) {\n    if (component) {\n      var componentIndex = createdComponents_.indexOf(component);\n      createdComponents_.splice(componentIndex, 1);\n\n      var upgrades = component.element_.getAttribute('data-upgraded').split(',');\n      var componentPlace = upgrades.indexOf(component[componentConfigProperty_].classAsString);\n      upgrades.splice(componentPlace, 1);\n      component.element_.setAttribute('data-upgraded', upgrades.join(','));\n\n      var ev;\n      if ('CustomEvent' in window && typeof window.CustomEvent === 'function') {\n        ev = new Event('mdl-componentdowngraded', {\n          'bubbles': true, 'cancelable': false\n        });\n      } else {\n        ev = document.createEvent('Events');\n        ev.initEvent('mdl-componentdowngraded', true, true);\n      }\n    }\n  }\n\n  /**\n   * Downgrade either a given node, an array of nodes, or a NodeList.\n   *\n   * @param {!Node|!Array<!Node>|!NodeList} nodes\n   */\n  function downgradeNodesInternal(nodes) {\n    /**\n     * Auxiliary function to downgrade a single node.\n     * @param  {!Node} node the node to be downgraded\n     */\n    var downgradeNode = function(node) {\n      createdComponents_.filter(function(item) {\n        return item.element_ === node;\n      }).forEach(deconstructComponentInternal);\n    };\n    if (nodes instanceof Array || nodes instanceof NodeList) {\n      for (var n = 0; n < nodes.length; n++) {\n        downgradeNode(nodes[n]);\n      }\n    } else if (nodes instanceof Node) {\n      downgradeNode(nodes);\n    } else {\n      throw new Error('Invalid argument provided to downgrade MDL nodes.');\n    }\n  }\n\n  // Now return the functions that should be made public with their publicly\n  // facing names...\n  return {\n    upgradeDom: upgradeDomInternal,\n    upgradeElement: upgradeElementInternal,\n    upgradeElements: upgradeElementsInternal,\n    upgradeAllRegistered: upgradeAllRegisteredInternal,\n    registerUpgradedCallback: registerUpgradedCallbackInternal,\n    register: registerInternal,\n    downgradeElements: downgradeNodesInternal\n  };\n})();\n\n/**\n * Describes the type of a registered component type managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   constructor: Function,\n *   classAsString: string,\n *   cssClass: string,\n *   widget: (string|boolean|undefined)\n * }}\n */\ncomponentHandler.ComponentConfigPublic;  // jshint ignore:line\n\n/**\n * Describes the type of a registered component type managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   constructor: !Function,\n *   className: string,\n *   cssClass: string,\n *   widget: (string|boolean),\n *   callbacks: !Array<function(!HTMLElement)>\n * }}\n */\ncomponentHandler.ComponentConfig;  // jshint ignore:line\n\n/**\n * Created component (i.e., upgraded element) type as managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   element_: !HTMLElement,\n *   className: string,\n *   classAsString: string,\n *   cssClass: string,\n *   widget: string\n * }}\n */\ncomponentHandler.Component;  // jshint ignore:line\n\n// Export all symbols, for the benefit of Closure compiler.\n// No effect on uncompiled code.\ncomponentHandler['upgradeDom'] = componentHandler.upgradeDom;\ncomponentHandler['upgradeElement'] = componentHandler.upgradeElement;\ncomponentHandler['upgradeElements'] = componentHandler.upgradeElements;\ncomponentHandler['upgradeAllRegistered'] =\n    componentHandler.upgradeAllRegistered;\ncomponentHandler['registerUpgradedCallback'] =\n    componentHandler.registerUpgradedCallback;\ncomponentHandler['register'] = componentHandler.register;\ncomponentHandler['downgradeElements'] = componentHandler.downgradeElements;\nwindow.componentHandler = componentHandler;\nwindow['componentHandler'] = componentHandler;\n\nwindow.addEventListener('load', function() {\n  'use strict';\n\n  /**\n   * Performs a \"Cutting the mustard\" test. If the browser supports the features\n   * tested, adds a mdl-js class to the <html> element. It then upgrades all MDL\n   * components requiring JavaScript.\n   */\n  if ('classList' in document.createElement('div') &&\n      'querySelector' in document &&\n      'addEventListener' in window && Array.prototype.forEach) {\n    document.documentElement.classList.add('mdl-js');\n    componentHandler.upgradeAllRegistered();\n  } else {\n    /**\n     * Dummy function to avoid JS errors.\n     */\n    componentHandler.upgradeElement = function() {};\n    /**\n     * Dummy function to avoid JS errors.\n     */\n    componentHandler.register = function() {};\n  }\n});\n\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function() {\n  'use strict';\n\n  /**\n   * Class constructor for Checkbox MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\n  var MaterialCheckbox = function MaterialCheckbox(element) {\n    this.element_ = element;\n\n    // Initialize instance.\n    this.init();\n  };\n  window['MaterialCheckbox'] = MaterialCheckbox;\n\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n  MaterialCheckbox.prototype.Constant_ = {\n    TINY_TIMEOUT: 0.001\n  };\n\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n  MaterialCheckbox.prototype.CssClasses_ = {\n    INPUT: 'mdl-checkbox__input',\n    BOX_OUTLINE: 'mdl-checkbox__box-outline',\n    FOCUS_HELPER: 'mdl-checkbox__focus-helper',\n    TICK_OUTLINE: 'mdl-checkbox__tick-outline',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-checkbox__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked',\n    IS_UPGRADED: 'is-upgraded'\n  };\n\n  /**\n   * Handle change of state.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialCheckbox.prototype.onChange_ = function(event) {\n    this.updateClasses_();\n  };\n\n  /**\n   * Handle focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialCheckbox.prototype.onFocus_ = function(event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle lost focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialCheckbox.prototype.onBlur_ = function(event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle mouseup.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialCheckbox.prototype.onMouseUp_ = function(event) {\n    this.blur_();\n  };\n\n  /**\n   * Handle class updates.\n   *\n   * @private\n   */\n  MaterialCheckbox.prototype.updateClasses_ = function() {\n    this.checkDisabled();\n    this.checkToggleState();\n  };\n\n  /**\n   * Add blur.\n   *\n   * @private\n   */\n  MaterialCheckbox.prototype.blur_ = function() {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function() {\n      this.inputElement_.blur();\n    }.bind(this), /** @type {number} */ (this.Constant_.TINY_TIMEOUT));\n  };\n\n  // Public methods.\n\n  /**\n   * Check the inputs toggle state and update display.\n   *\n   * @public\n   */\n  MaterialCheckbox.prototype.checkToggleState = function() {\n    if (this.inputElement_.checked) {\n      this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n  };\n  MaterialCheckbox.prototype['checkToggleState'] =\n      MaterialCheckbox.prototype.checkToggleState;\n\n  /**\n   * Check the inputs disabled state and update display.\n   *\n   * @public\n   */\n  MaterialCheckbox.prototype.checkDisabled = function() {\n    if (this.inputElement_.disabled) {\n      this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n  };\n  MaterialCheckbox.prototype['checkDisabled'] =\n      MaterialCheckbox.prototype.checkDisabled;\n\n  /**\n   * Disable checkbox.\n   *\n   * @public\n   */\n  MaterialCheckbox.prototype.disable = function() {\n    this.inputElement_.disabled = true;\n    this.updateClasses_();\n  };\n  MaterialCheckbox.prototype['disable'] = MaterialCheckbox.prototype.disable;\n\n  /**\n   * Enable checkbox.\n   *\n   * @public\n   */\n  MaterialCheckbox.prototype.enable = function() {\n    this.inputElement_.disabled = false;\n    this.updateClasses_();\n  };\n  MaterialCheckbox.prototype['enable'] = MaterialCheckbox.prototype.enable;\n\n  /**\n   * Check checkbox.\n   *\n   * @public\n   */\n  MaterialCheckbox.prototype.check = function() {\n    this.inputElement_.checked = true;\n    this.updateClasses_();\n  };\n  MaterialCheckbox.prototype['check'] = MaterialCheckbox.prototype.check;\n\n  /**\n   * Uncheck checkbox.\n   *\n   * @public\n   */\n  MaterialCheckbox.prototype.uncheck = function() {\n    this.inputElement_.checked = false;\n    this.updateClasses_();\n  };\n  MaterialCheckbox.prototype['uncheck'] = MaterialCheckbox.prototype.uncheck;\n\n  /**\n   * Initialize element.\n   */\n  MaterialCheckbox.prototype.init = function() {\n    if (this.element_) {\n      this.inputElement_ = this.element_.querySelector('.' +\n          this.CssClasses_.INPUT);\n\n      var boxOutline = document.createElement('span');\n      boxOutline.classList.add(this.CssClasses_.BOX_OUTLINE);\n\n      var tickContainer = document.createElement('span');\n      tickContainer.classList.add(this.CssClasses_.FOCUS_HELPER);\n\n      var tickOutline = document.createElement('span');\n      tickOutline.classList.add(this.CssClasses_.TICK_OUTLINE);\n\n      boxOutline.appendChild(tickOutline);\n\n      this.element_.appendChild(tickContainer);\n      this.element_.appendChild(boxOutline);\n\n      if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n        this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n        this.rippleContainerElement_ = document.createElement('span');\n        this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n        this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n        this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\n        this.boundRippleMouseUp = this.onMouseUp_.bind(this);\n        this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);\n\n        var ripple = document.createElement('span');\n        ripple.classList.add(this.CssClasses_.RIPPLE);\n\n        this.rippleContainerElement_.appendChild(ripple);\n        this.element_.appendChild(this.rippleContainerElement_);\n      }\n      this.boundInputOnChange = this.onChange_.bind(this);\n      this.boundInputOnFocus = this.onFocus_.bind(this);\n      this.boundInputOnBlur = this.onBlur_.bind(this);\n      this.boundElementMouseUp = this.onMouseUp_.bind(this);\n      this.inputElement_.addEventListener('change', this.boundInputOnChange);\n      this.inputElement_.addEventListener('focus', this.boundInputOnFocus);\n      this.inputElement_.addEventListener('blur', this.boundInputOnBlur);\n      this.element_.addEventListener('mouseup', this.boundElementMouseUp);\n\n      this.updateClasses_();\n      this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialCheckbox,\n    classAsString: 'MaterialCheckbox',\n    cssClass: 'mdl-js-checkbox',\n    widget: true\n  });\n})();\n\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function() {\n  'use strict';\n\n  /**\n   * Class constructor for Radio MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\n  var MaterialRadio = function MaterialRadio(element) {\n    this.element_ = element;\n\n    // Initialize instance.\n    this.init();\n  };\n  window['MaterialRadio'] = MaterialRadio;\n\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n  MaterialRadio.prototype.Constant_ = {\n    TINY_TIMEOUT: 0.001\n  };\n\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n  MaterialRadio.prototype.CssClasses_ = {\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked',\n    IS_UPGRADED: 'is-upgraded',\n    JS_RADIO: 'mdl-js-radio',\n    RADIO_BTN: 'mdl-radio__button',\n    RADIO_OUTER_CIRCLE: 'mdl-radio__outer-circle',\n    RADIO_INNER_CIRCLE: 'mdl-radio__inner-circle',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-radio__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple'\n  };\n\n  /**\n   * Handle change of state.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialRadio.prototype.onChange_ = function(event) {\n    // Since other radio buttons don't get change events, we need to look for\n    // them to update their classes.\n    var radios = document.getElementsByClassName(this.CssClasses_.JS_RADIO);\n    for (var i = 0; i < radios.length; i++) {\n      var button = radios[i].querySelector('.' + this.CssClasses_.RADIO_BTN);\n      // Different name == different group, so no point updating those.\n      if (button.getAttribute('name') === this.btnElement_.getAttribute('name')) {\n        radios[i]['MaterialRadio'].updateClasses_();\n      }\n    }\n  };\n\n  /**\n   * Handle focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialRadio.prototype.onFocus_ = function(event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle lost focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialRadio.prototype.onBlur_ = function(event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle mouseup.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialRadio.prototype.onMouseup_ = function(event) {\n    this.blur_();\n  };\n\n  /**\n   * Update classes.\n   *\n   * @private\n   */\n  MaterialRadio.prototype.updateClasses_ = function() {\n    this.checkDisabled();\n    this.checkToggleState();\n  };\n\n  /**\n   * Add blur.\n   *\n   * @private\n   */\n  MaterialRadio.prototype.blur_ = function() {\n\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function() {\n      this.btnElement_.blur();\n    }.bind(this), /** @type {number} */ (this.Constant_.TINY_TIMEOUT));\n  };\n\n  // Public methods.\n\n  /**\n   * Check the components disabled state.\n   *\n   * @public\n   */\n  MaterialRadio.prototype.checkDisabled = function() {\n    if (this.btnElement_.disabled) {\n      this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n  };\n  MaterialRadio.prototype['checkDisabled'] =\n      MaterialRadio.prototype.checkDisabled;\n\n  /**\n   * Check the components toggled state.\n   *\n   * @public\n   */\n  MaterialRadio.prototype.checkToggleState = function() {\n    if (this.btnElement_.checked) {\n      this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n  };\n  MaterialRadio.prototype['checkToggleState'] =\n      MaterialRadio.prototype.checkToggleState;\n\n  /**\n   * Disable radio.\n   *\n   * @public\n   */\n  MaterialRadio.prototype.disable = function() {\n    this.btnElement_.disabled = true;\n    this.updateClasses_();\n  };\n  MaterialRadio.prototype['disable'] = MaterialRadio.prototype.disable;\n\n  /**\n   * Enable radio.\n   *\n   * @public\n   */\n  MaterialRadio.prototype.enable = function() {\n    this.btnElement_.disabled = false;\n    this.updateClasses_();\n  };\n  MaterialRadio.prototype['enable'] = MaterialRadio.prototype.enable;\n\n  /**\n   * Check radio.\n   *\n   * @public\n   */\n  MaterialRadio.prototype.check = function() {\n    this.btnElement_.checked = true;\n    this.updateClasses_();\n  };\n  MaterialRadio.prototype['check'] = MaterialRadio.prototype.check;\n\n  /**\n   * Uncheck radio.\n   *\n   * @public\n   */\n  MaterialRadio.prototype.uncheck = function() {\n    this.btnElement_.checked = false;\n    this.updateClasses_();\n  };\n  MaterialRadio.prototype['uncheck'] = MaterialRadio.prototype.uncheck;\n\n  /**\n   * Initialize element.\n   */\n  MaterialRadio.prototype.init = function() {\n    if (this.element_) {\n      this.btnElement_ = this.element_.querySelector('.' +\n          this.CssClasses_.RADIO_BTN);\n\n      this.boundChangeHandler_ = this.onChange_.bind(this);\n      this.boundFocusHandler_ = this.onChange_.bind(this);\n      this.boundBlurHandler_ = this.onBlur_.bind(this);\n      this.boundMouseUpHandler_ = this.onMouseup_.bind(this);\n\n      var outerCircle = document.createElement('span');\n      outerCircle.classList.add(this.CssClasses_.RADIO_OUTER_CIRCLE);\n\n      var innerCircle = document.createElement('span');\n      innerCircle.classList.add(this.CssClasses_.RADIO_INNER_CIRCLE);\n\n      this.element_.appendChild(outerCircle);\n      this.element_.appendChild(innerCircle);\n\n      var rippleContainer;\n      if (this.element_.classList.contains(\n          this.CssClasses_.RIPPLE_EFFECT)) {\n        this.element_.classList.add(\n            this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n        rippleContainer = document.createElement('span');\n        rippleContainer.classList.add(\n            this.CssClasses_.RIPPLE_CONTAINER);\n        rippleContainer.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n        rippleContainer.classList.add(this.CssClasses_.RIPPLE_CENTER);\n        rippleContainer.addEventListener('mouseup', this.boundMouseUpHandler_);\n\n        var ripple = document.createElement('span');\n        ripple.classList.add(this.CssClasses_.RIPPLE);\n\n        rippleContainer.appendChild(ripple);\n        this.element_.appendChild(rippleContainer);\n      }\n\n      this.btnElement_.addEventListener('change', this.boundChangeHandler_);\n      this.btnElement_.addEventListener('focus', this.boundFocusHandler_);\n      this.btnElement_.addEventListener('blur', this.boundBlurHandler_);\n      this.element_.addEventListener('mouseup', this.boundMouseUpHandler_);\n\n      this.updateClasses_();\n      this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialRadio,\n    classAsString: 'MaterialRadio',\n    cssClass: 'mdl-js-radio',\n    widget: true\n  });\n})();\n\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function() {\n  'use strict';\n\n  /**\n   * Class constructor for Textfield MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\n  var MaterialTextfield = function MaterialTextfield(element) {\n    this.element_ = element;\n    this.maxRows = this.Constant_.NO_MAX_ROWS;\n    // Initialize instance.\n    this.init();\n  };\n  window['MaterialTextfield'] = MaterialTextfield;\n\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n  MaterialTextfield.prototype.Constant_ = {\n    NO_MAX_ROWS: -1,\n    MAX_ROWS_ATTRIBUTE: 'maxrows'\n  };\n\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n  MaterialTextfield.prototype.CssClasses_ = {\n    LABEL: 'mdl-textfield__label',\n    INPUT: 'mdl-textfield__input',\n    IS_DIRTY: 'is-dirty',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_INVALID: 'is-invalid',\n    IS_UPGRADED: 'is-upgraded',\n    HAS_PLACEHOLDER: 'has-placeholder'\n  };\n\n  /**\n   * Handle input being entered.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialTextfield.prototype.onKeyDown_ = function(event) {\n    var currentRowCount = event.target.value.split('\\n').length;\n    if (event.keyCode === 13) {\n      if (currentRowCount >= this.maxRows) {\n        event.preventDefault();\n      }\n    }\n  };\n\n  /**\n   * Handle focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialTextfield.prototype.onFocus_ = function(event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle lost focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialTextfield.prototype.onBlur_ = function(event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle reset event from out side.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialTextfield.prototype.onReset_ = function(event) {\n    this.updateClasses_();\n  };\n\n  /**\n   * Handle class updates.\n   *\n   * @private\n   */\n  MaterialTextfield.prototype.updateClasses_ = function() {\n    this.checkDisabled();\n    this.checkValidity();\n    this.checkDirty();\n    this.checkFocus();\n  };\n\n  // Public methods.\n\n  /**\n   * Check the disabled state and update field accordingly.\n   *\n   * @public\n   */\n  MaterialTextfield.prototype.checkDisabled = function() {\n    if (this.input_.disabled) {\n      this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n  };\n  MaterialTextfield.prototype['checkDisabled'] =\n      MaterialTextfield.prototype.checkDisabled;\n\n  /**\n  * Check the focus state and update field accordingly.\n  *\n  * @public\n  */\n  MaterialTextfield.prototype.checkFocus = function() {\n    if (Boolean(this.element_.querySelector(':focus'))) {\n      this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n    }\n  };\n  MaterialTextfield.prototype['checkFocus'] =\n    MaterialTextfield.prototype.checkFocus;\n\n  /**\n   * Check the validity state and update field accordingly.\n   *\n   * @public\n   */\n  MaterialTextfield.prototype.checkValidity = function() {\n    if (this.input_.validity) {\n      if (this.input_.validity.valid) {\n        this.element_.classList.remove(this.CssClasses_.IS_INVALID);\n      } else {\n        this.element_.classList.add(this.CssClasses_.IS_INVALID);\n      }\n    }\n  };\n  MaterialTextfield.prototype['checkValidity'] =\n      MaterialTextfield.prototype.checkValidity;\n\n  /**\n   * Check the dirty state and update field accordingly.\n   *\n   * @public\n   */\n  MaterialTextfield.prototype.checkDirty = function() {\n    if (this.input_.value && this.input_.value.length > 0) {\n      this.element_.classList.add(this.CssClasses_.IS_DIRTY);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_DIRTY);\n    }\n  };\n  MaterialTextfield.prototype['checkDirty'] =\n      MaterialTextfield.prototype.checkDirty;\n\n  /**\n   * Disable text field.\n   *\n   * @public\n   */\n  MaterialTextfield.prototype.disable = function() {\n    this.input_.disabled = true;\n    this.updateClasses_();\n  };\n  MaterialTextfield.prototype['disable'] = MaterialTextfield.prototype.disable;\n\n  /**\n   * Enable text field.\n   *\n   * @public\n   */\n  MaterialTextfield.prototype.enable = function() {\n    this.input_.disabled = false;\n    this.updateClasses_();\n  };\n  MaterialTextfield.prototype['enable'] = MaterialTextfield.prototype.enable;\n\n  /**\n   * Update text field value.\n   *\n   * @param {string} value The value to which to set the control (optional).\n   * @public\n   */\n  MaterialTextfield.prototype.change = function(value) {\n\n    this.input_.value = value || '';\n    this.updateClasses_();\n  };\n  MaterialTextfield.prototype['change'] = MaterialTextfield.prototype.change;\n\n  /**\n   * Initialize element.\n   */\n  MaterialTextfield.prototype.init = function() {\n\n    if (this.element_) {\n      this.label_ = this.element_.querySelector('.' + this.CssClasses_.LABEL);\n      this.input_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n\n      if (this.input_) {\n        if (this.input_.hasAttribute(\n              /** @type {string} */ (this.Constant_.MAX_ROWS_ATTRIBUTE))) {\n          this.maxRows = parseInt(this.input_.getAttribute(\n              /** @type {string} */ (this.Constant_.MAX_ROWS_ATTRIBUTE)), 10);\n          if (isNaN(this.maxRows)) {\n            this.maxRows = this.Constant_.NO_MAX_ROWS;\n          }\n        }\n\n        if (this.input_.hasAttribute('placeholder')) {\n          this.element_.classList.add(this.CssClasses_.HAS_PLACEHOLDER);\n        }\n\n        this.boundUpdateClassesHandler = this.updateClasses_.bind(this);\n        this.boundFocusHandler = this.onFocus_.bind(this);\n        this.boundBlurHandler = this.onBlur_.bind(this);\n        this.boundResetHandler = this.onReset_.bind(this);\n        this.input_.addEventListener('input', this.boundUpdateClassesHandler);\n        this.input_.addEventListener('focus', this.boundFocusHandler);\n        this.input_.addEventListener('blur', this.boundBlurHandler);\n        this.input_.addEventListener('reset', this.boundResetHandler);\n\n        if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {\n          // TODO: This should handle pasting multi line text.\n          // Currently doesn't.\n          this.boundKeyDownHandler = this.onKeyDown_.bind(this);\n          this.input_.addEventListener('keydown', this.boundKeyDownHandler);\n        }\n        var invalid = this.element_.classList\n          .contains(this.CssClasses_.IS_INVALID);\n        this.updateClasses_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n        if (invalid) {\n          this.element_.classList.add(this.CssClasses_.IS_INVALID);\n        }\n        if (this.input_.hasAttribute('autofocus')) {\n          this.element_.focus();\n          this.checkFocus();\n        }\n      }\n    }\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialTextfield,\n    classAsString: 'MaterialTextfield',\n    cssClass: 'mdl-js-textfield',\n    widget: true\n  });\n})();\n\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function() {\n  'use strict';\n\n  /**\n   * Class constructor for Data Table Card MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {Element} element The element that will be upgraded.\n   */\n  var MaterialDataTable = function MaterialDataTable(element) {\n    this.element_ = element;\n\n    // Initialize instance.\n    this.init();\n  };\n\n  window['MaterialDataTable'] = MaterialDataTable;\n\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n  MaterialDataTable.prototype.Constant_ = {\n    // None at the moment.\n  };\n\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n  MaterialDataTable.prototype.CssClasses_ = {\n    DATA_TABLE: 'mdl-data-table',\n    SELECTABLE: 'mdl-data-table--selectable',\n    SELECT_ELEMENT: 'mdl-data-table__select',\n    IS_SELECTED: 'is-selected',\n    IS_UPGRADED: 'is-upgraded'\n  };\n\n  /**\n   * Generates and returns a function that toggles the selection state of a\n   * single row (or multiple rows).\n   *\n   * @param {Element} checkbox Checkbox that toggles the selection state.\n   * @param {Element} row Row to toggle when checkbox changes.\n   * @param {(Array<Object>|NodeList)=} opt_rows Rows to toggle when checkbox changes.\n   * @private\n   */\n  MaterialDataTable.prototype.selectRow_ = function(checkbox, row, opt_rows) {\n    if (row) {\n      return function() {\n        if (checkbox.checked) {\n          row.classList.add(this.CssClasses_.IS_SELECTED);\n        } else {\n          row.classList.remove(this.CssClasses_.IS_SELECTED);\n        }\n      }.bind(this);\n    }\n\n    if (opt_rows) {\n      return function() {\n        var i;\n        var el;\n        if (checkbox.checked) {\n          for (i = 0; i < opt_rows.length; i++) {\n            el = opt_rows[i].querySelector('td').querySelector('.mdl-checkbox');\n            el['MaterialCheckbox'].check();\n            opt_rows[i].classList.add(this.CssClasses_.IS_SELECTED);\n          }\n        } else {\n          for (i = 0; i < opt_rows.length; i++) {\n            el = opt_rows[i].querySelector('td').querySelector('.mdl-checkbox');\n            el['MaterialCheckbox'].uncheck();\n            opt_rows[i].classList.remove(this.CssClasses_.IS_SELECTED);\n          }\n        }\n      }.bind(this);\n    }\n  };\n\n  /**\n   * Creates a checkbox for a single or or multiple rows and hooks up the\n   * event handling.\n   *\n   * @param {Element} row Row to toggle when checkbox changes.\n   * @param {(Array<Object>|NodeList)=} opt_rows Rows to toggle when checkbox changes.\n   * @private\n   */\n  MaterialDataTable.prototype.createCheckbox_ = function(row, opt_rows) {\n    var label = document.createElement('label');\n    var labelClasses = [\n      'mdl-checkbox',\n      'mdl-js-checkbox',\n      'mdl-js-ripple-effect',\n      this.CssClasses_.SELECT_ELEMENT\n    ];\n    label.className = labelClasses.join(' ');\n    var checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    checkbox.classList.add('mdl-checkbox__input');\n\n    if (row) {\n      checkbox.checked = row.classList.contains(this.CssClasses_.IS_SELECTED);\n      checkbox.addEventListener('change', this.selectRow_(checkbox, row));\n    } else if (opt_rows) {\n      checkbox.addEventListener('change', this.selectRow_(checkbox, null, opt_rows));\n    }\n\n    label.appendChild(checkbox);\n    componentHandler.upgradeElement(label, 'MaterialCheckbox');\n    return label;\n  };\n\n  /**\n   * Initialize element.\n   */\n  MaterialDataTable.prototype.init = function() {\n    if (this.element_) {\n      var firstHeader = this.element_.querySelector('th');\n      var bodyRows = Array.prototype.slice.call(this.element_.querySelectorAll('tbody tr'));\n      var footRows = Array.prototype.slice.call(this.element_.querySelectorAll('tfoot tr'));\n      var rows = bodyRows.concat(footRows);\n\n      if (this.element_.classList.contains(this.CssClasses_.SELECTABLE)) {\n        var th = document.createElement('th');\n        var headerCheckbox = this.createCheckbox_(null, rows);\n        th.appendChild(headerCheckbox);\n        firstHeader.parentElement.insertBefore(th, firstHeader);\n\n        for (var i = 0; i < rows.length; i++) {\n          var firstCell = rows[i].querySelector('td');\n          if (firstCell) {\n            var td = document.createElement('td');\n            if (rows[i].parentNode.nodeName.toUpperCase() === 'TBODY') {\n              var rowCheckbox = this.createCheckbox_(rows[i]);\n              td.appendChild(rowCheckbox);\n            }\n            rows[i].insertBefore(td, firstCell);\n          }\n        }\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n      }\n    }\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialDataTable,\n    classAsString: 'MaterialDataTable',\n    cssClass: 'mdl-js-data-table'\n  });\n})();\n\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function() {\n  'use strict';\n\n  /**\n   * Class constructor for Ripple MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\n  var MaterialRipple = function MaterialRipple(element) {\n    this.element_ = element;\n\n    // Initialize instance.\n    this.init();\n  };\n  window['MaterialRipple'] = MaterialRipple;\n\n  /**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {string | number}\n   * @private\n   */\n  MaterialRipple.prototype.Constant_ = {\n    INITIAL_SCALE: 'scale(0.0001, 0.0001)',\n    INITIAL_SIZE: '1px',\n    INITIAL_OPACITY: '0.4',\n    FINAL_OPACITY: '0',\n    FINAL_SCALE: ''\n  };\n\n  /**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {string}\n   * @private\n   */\n  MaterialRipple.prototype.CssClasses_ = {\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE: 'mdl-ripple',\n    IS_ANIMATING: 'is-animating',\n    IS_VISIBLE: 'is-visible'\n  };\n\n  /**\n   * Handle mouse / finger down on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialRipple.prototype.downHandler_ = function(event) {\n    if (!this.rippleElement_.style.width && !this.rippleElement_.style.height) {\n      var rect = this.element_.getBoundingClientRect();\n      this.boundHeight = rect.height;\n      this.boundWidth = rect.width;\n      this.rippleSize_ = Math.sqrt(rect.width * rect.width +\n          rect.height * rect.height) * 2 + 2;\n      this.rippleElement_.style.width = this.rippleSize_ + 'px';\n      this.rippleElement_.style.height = this.rippleSize_ + 'px';\n    }\n\n    this.rippleElement_.classList.add(this.CssClasses_.IS_VISIBLE);\n\n    if (event.type === 'mousedown' && this.ignoringMouseDown_) {\n      this.ignoringMouseDown_ = false;\n    } else {\n      if (event.type === 'touchstart') {\n        this.ignoringMouseDown_ = true;\n      }\n      var frameCount = this.getFrameCount();\n      if (frameCount > 0) {\n        return;\n      }\n      this.setFrameCount(1);\n      var bound = event.currentTarget.getBoundingClientRect();\n      var x;\n      var y;\n      // Check if we are handling a keyboard click.\n      if (event.clientX === 0 && event.clientY === 0) {\n        x = Math.round(bound.width / 2);\n        y = Math.round(bound.height / 2);\n      } else {\n        var clientX = event.clientX ? event.clientX : event.touches[0].clientX;\n        var clientY = event.clientY ? event.clientY : event.touches[0].clientY;\n        x = Math.round(clientX - bound.left);\n        y = Math.round(clientY - bound.top);\n      }\n      this.setRippleXY(x, y);\n      this.setRippleStyles(true);\n      window.requestAnimationFrame(this.animFrameHandler.bind(this));\n    }\n  };\n\n  /**\n   * Handle mouse / finger up on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialRipple.prototype.upHandler_ = function(event) {\n    // Don't fire for the artificial \"mouseup\" generated by a double-click.\n    if (event && event.detail !== 2) {\n      // Allow a repaint to occur before removing this class, so the animation\n      // shows for tap events, which seem to trigger a mouseup too soon after\n      // mousedown.\n      window.setTimeout(function() {\n        this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE);\n      }.bind(this), 0);\n    }\n  };\n\n  /**\n   * Initialize element.\n   */\n  MaterialRipple.prototype.init = function() {\n    if (this.element_) {\n      var recentering =\n          this.element_.classList.contains(this.CssClasses_.RIPPLE_CENTER);\n      if (!this.element_.classList.contains(\n          this.CssClasses_.RIPPLE_EFFECT_IGNORE_EVENTS)) {\n        this.rippleElement_ = this.element_.querySelector('.' +\n            this.CssClasses_.RIPPLE);\n        this.frameCount_ = 0;\n        this.rippleSize_ = 0;\n        this.x_ = 0;\n        this.y_ = 0;\n\n        // Touch start produces a compat mouse down event, which would cause a\n        // second ripples. To avoid that, we use this property to ignore the first\n        // mouse down after a touch start.\n        this.ignoringMouseDown_ = false;\n\n        this.boundDownHandler = this.downHandler_.bind(this);\n        this.element_.addEventListener('mousedown',\n          this.boundDownHandler);\n        this.element_.addEventListener('touchstart',\n            this.boundDownHandler);\n\n        this.boundUpHandler = this.upHandler_.bind(this);\n        this.element_.addEventListener('mouseup', this.boundUpHandler);\n        this.element_.addEventListener('mouseleave', this.boundUpHandler);\n        this.element_.addEventListener('touchend', this.boundUpHandler);\n        this.element_.addEventListener('blur', this.boundUpHandler);\n\n        /**\n         * Getter for frameCount_.\n         * @return {number} the frame count.\n         */\n        this.getFrameCount = function() {\n          return this.frameCount_;\n        };\n\n        /**\n         * Setter for frameCount_.\n         * @param {number} fC the frame count.\n         */\n        this.setFrameCount = function(fC) {\n          this.frameCount_ = fC;\n        };\n\n        /**\n         * Getter for rippleElement_.\n         * @return {Element} the ripple element.\n         */\n        this.getRippleElement = function() {\n          return this.rippleElement_;\n        };\n\n        /**\n         * Sets the ripple X and Y coordinates.\n         * @param  {number} newX the new X coordinate\n         * @param  {number} newY the new Y coordinate\n         */\n        this.setRippleXY = function(newX, newY) {\n          this.x_ = newX;\n          this.y_ = newY;\n        };\n\n        /**\n         * Sets the ripple styles.\n         * @param  {boolean} start whether or not this is the start frame.\n         */\n        this.setRippleStyles = function(start) {\n          if (this.rippleElement_ !== null) {\n            var transformString;\n            var scale;\n            var size;\n            var offset = 'translate(' + this.x_ + 'px, ' + this.y_ + 'px)';\n\n            if (start) {\n              scale = this.Constant_.INITIAL_SCALE;\n              size = this.Constant_.INITIAL_SIZE;\n            } else {\n              scale = this.Constant_.FINAL_SCALE;\n              size = this.rippleSize_ + 'px';\n              if (recentering) {\n                offset = 'translate(' + this.boundWidth / 2 + 'px, ' +\n                  this.boundHeight / 2 + 'px)';\n              }\n            }\n\n            transformString = 'translate(-50%, -50%) ' + offset + scale;\n\n            this.rippleElement_.style.webkitTransform = transformString;\n            this.rippleElement_.style.msTransform = transformString;\n            this.rippleElement_.style.transform = transformString;\n\n            if (start) {\n              this.rippleElement_.classList.remove(this.CssClasses_.IS_ANIMATING);\n            } else {\n              this.rippleElement_.classList.add(this.CssClasses_.IS_ANIMATING);\n            }\n          }\n        };\n\n        /**\n         * Handles an animation frame.\n         */\n        this.animFrameHandler = function() {\n          if (this.frameCount_-- > 0) {\n            window.requestAnimationFrame(this.animFrameHandler.bind(this));\n          } else {\n            this.setRippleStyles(false);\n          }\n        };\n      }\n    }\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialRipple,\n    classAsString: 'MaterialRipple',\n    cssClass: 'mdl-js-ripple-effect',\n    widget: false\n  });\n})();\n\n(function() {\n  'use strict';\n\n  /**\n   * Class constructor for Select field MDL component.\n   * Implements custom MDL component design pattern not defined yet.\n   *\n   * @constructor\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\n  var MaterialSelectfield = function MaterialSelectfield(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n  };\n  window['MaterialSelectfield'] = MaterialSelectfield;\n\n  MaterialSelectfield.prototype.Constant_ = {\n    // None for now\n  };\n\n  MaterialSelectfield.prototype.CssClasses_ = {\n    LABEL: 'mdl-selectfield__label',\n    SELECT: 'mdl-selectfield__select',\n    IS_DIRTY: 'is-dirty',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_INVALID: 'is-invalid',\n    IS_UPGRADED: 'is-upgraded'\n  };\n\n  /**\n   * Handle focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialSelectfield.prototype.onFocus_ = function(event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle lost focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialSelectfield.prototype.onBlur_ = function(event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n  };\n\n  /**\n   * Handle reset event from outside.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\n  MaterialSelectfield.prototype.onReset_ = function(event) {\n    this.updateClasses_();\n  };\n\n  /**\n   * Handle class updates.\n   *\n   * @private\n   */\n  MaterialSelectfield.prototype.updateClasses_ = function() {\n    this.checkDisabled();\n    this.checkValidity();\n    this.checkDirty();\n  };\n\n  // Public methods.\n\n  /**\n   * Check the disabled state and update field accordingly.\n   *\n   * @public\n   */\n  MaterialSelectfield.prototype.checkDisabled = function() {\n    if (this.select_.disabled) {\n      this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n  };\n  MaterialSelectfield.prototype['checkDisabled'] = MaterialSelectfield.prototype.checkDisabled;\n\n  /**\n   * Check the validity state and update field accordingly.\n   *\n   * @public\n   */\n  MaterialSelectfield.prototype.checkValidity = function() {\n    if (this.select_.validity.valid) {\n      this.element_.classList.remove(this.CssClasses_.IS_INVALID);\n    } else {\n      this.element_.classList.add(this.CssClasses_.IS_INVALID);\n    }\n  };\n  MaterialSelectfield.prototype['checkValidity'] = MaterialSelectfield.prototype.checkValidity;\n\n  /**\n   * Check the dirty state and update field accordingly.\n   *\n   * @public\n   */\n  MaterialSelectfield.prototype.checkDirty = function() {\n    if (this.select_.value && this.select_.value.length > 0) {\n      this.element_.classList.add(this.CssClasses_.IS_DIRTY);\n    } else {\n      this.element_.classList.remove(this.CssClasses_.IS_DIRTY);\n    }\n  };\n  MaterialSelectfield.prototype['checkDirty'] = MaterialSelectfield.prototype.checkDirty;\n\n  /**\n   * Enable select field.\n   *\n   * @public\n   */\n  MaterialSelectfield.prototype.disable = function() {\n    this.select_.disabled = true;\n    this.updateClasses_();\n  };\n  MaterialSelectfield.prototype['disable'] = MaterialSelectfield.prototype.disable;\n\n  /**\n   * Enable select field.\n   *\n   * @public\n   */\n  MaterialSelectfield.prototype.enable = function() {\n    this.select_.disabled = false;\n    this.updateClasses_();\n  };\n  MaterialSelectfield.prototype['enable'] = MaterialSelectfield.prototype.enable;\n\n  /**\n   * Update select field value.\n   *\n   * @param {string} value The value to which to set the control (optional).\n   * @public\n   */\n  MaterialSelectfield.prototype.change = function(value) {\n    if (value) {\n      this.select_.value = value;\n    }\n    this.updateClasses_();\n  };\n  MaterialSelectfield.prototype['change'] = MaterialSelectfield.prototype.change;\n\n  /**\n   * Initialize element.\n   */\n  MaterialSelectfield.prototype.init = function() {\n    if (this.element_) {\n      this.label_ = this.element_.querySelector('.' + this.CssClasses_.LABEL);\n      this.select_ = this.element_.querySelector('.' + this.CssClasses_.SELECT);\n\n      if (this.select_) {\n        this.boundUpdateClassesHandler = this.updateClasses_.bind(this);\n        this.boundFocusHandler = this.onFocus_.bind(this);\n        this.boundBlurHandler = this.onBlur_.bind(this);\n        this.boundResetHandler = this.onReset_.bind(this);\n        this.select_.addEventListener('change', this.boundUpdateClassesHandler);\n        this.select_.addEventListener('focus', this.boundFocusHandler);\n        this.select_.addEventListener('blur', this.boundBlurHandler);\n        this.select_.addEventListener('reset', this.boundResetHandler);\n\n        this.updateClasses_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n      }\n    }\n  };\n\n  /**\n   * Downgrade the component\n   *\n   * @private\n   */\n  MaterialSelectfield.prototype.mdlDowngrade_ = function() {\n    this.select_.removeEventListener('change', this.boundUpdateClassesHandler);\n    this.select_.removeEventListener('focus', this.boundFocusHandler);\n    this.select_.removeEventListener('blur', this.boundBlurHandler);\n    this.select_.removeEventListener('reset', this.boundResetHandler);\n  };\n\n  // The component registers itself. It can assume componentHandler is available\n  // in the global scope.\n  componentHandler.register({\n    constructor: MaterialSelectfield,\n    classAsString: 'MaterialSelectfield',\n    cssClass: 'mdl-js-selectfield',\n    widget: true\n  });\n})();\n\n(function($) {\n\t'use strict';\n\t/**\n\t *\n\t * See room for improvements...CONTRIBUTE, CONTRIBUTE, CONTRIBUTE!\n\t * Contact the Common Framework UI Group for more details or see our confluence page.\n\t *\n     *\n     * TODO: need to find a way to pass custom templates and allow user to use pass it via data attribute!\n     *\n     * NOTE: babel compiles ES6 string interpolations but backtick is needed!\n\t */\n\t$('[data-charlimit]').each((idx, val) => {\n\t\tlet attrOptions = $(val).attr('data-charlimit');\n        if (attrOptions && attrOptions !== \"\"){\n            attrOptions = attrOptions.replace(new RegExp(\"'\", \"g\"), '\"');\n            let dataoptions = $.parseJSON(\"{\" + attrOptions + \"}\"),\n                template = dataoptions.template,\n                updateChar = (ev) => {\n                    let currentLength = $(ev.currentTarget).val().length,\n                        limit = dataoptions.limit;\n                    $(val).parent().find(dataoptions.target).html(template || `<strong> ${currentLength}/${limit} </strong> character limit`);\n                };\n\n            $(val).keypress(updateChar);\n            $(val).on('paste', updateChar);\n            updateChar({ currentTarget: val });\n        }\n\t});\n}($));\n\n(function($) {\n\t'use strict';\n\t/**\n\t *\n\t * See room for improvements...CONTRIBUTE, CONTRIBUTE, CONTRIBUTE!\n\t * Contact the Common Framework UI Group for more details or see our confluence page.\n\t *\n\t */\n\tif ($('.datepicker').length > 0) {\n\t\tif (!$.datepicker) {\n\t\t\treturn false;\n\t\t}\n\t\tvar oldGoToToday = $.datepicker._gotoToday;\n\t\t$.datepicker._gotoToday = function(id) {\n\t\t\toldGoToToday.call(this, id);\n\t\t\tthis._selectDate(id);\n\t\t};\n\t}\n}($));\n\n\n(function() {\n\n  'use strict';\n\n  !function(factory) {\n      \"function\" == typeof define && define.amd ? define([ \"jquery\", \"./jquery.inputmask\" ], factory) : \"object\" == typeof exports ? module.exports = factory(require(\"jquery\"), require(\"./jquery.inputmask\")) : factory(jQuery);\n  }(function($) {\n\n      if (!$.inputmask || !$.inputmask.defaults) {\n        return false; // fail gracefully\n      }\n\n      var checkDirty = function(ev) {\n        //console.info($(ev.target).parent().get(0));\n        //console.info($(ev.target).parent().get(0).MaterialTextfield);\n        if ($(ev.target).parent().get(0).MaterialTextfield) {\n          $(ev.target).parent().get(0).MaterialTextfield.checkDirty();\n        }\n      };\n\n      var placeholderCheckDirty = function(ev) {\n        var target = ev.target || this;\n        //console.info(target);\n        $(target).focus(function() {\n          //console.info(this);\n          $(this).parent().addClass('is-dirty');\n        }).blur(function() {\n          if ($(target).parent().get(0).MaterialTextfield) {\n            $(target).parent().get(0).MaterialTextfield.checkDirty();\n          }\n        });\n      };\n\n      return $.extend($.inputmask.defaults.aliases,\n        {\n          'mdl-textfield-default': {\n            showMaskOnHover: false,\n            onKeyDown: checkDirty\n          },\n          'mdl-textfield-default-placeholder': {\n            showMaskOnHover: false,\n            onKeyDown: placeholderCheckDirty,\n            onBeforeMask: placeholderCheckDirty\n          },\n          'mdl-mask-datepicker': {\n            alias: 'dd/mm/yyyy', // use one of the predefined inputmasks\n            showMaskOnHover: false,\n            mask: 'm/d/y',\n            placeholder: 'mm/dd/yyyy',\n            onKeyDown: checkDirty\n          },\n          'mdl-mask-datepicker-placeholder': {\n            alias: 'dd/mm/yyyy', // use one of the predefined inputmasks\n            showMaskOnHover: false,\n            mask: 'm/d/y',\n            placeholder: 'mm/dd/yyyy',\n            onKeyDown: placeholderCheckDirty,\n            onBeforeMask: placeholderCheckDirty\n          }\n        }\n      ), $.fn.inputmask;\n\n  });\n\n}());\n\n(function($) {\n\n  'use strict';\n\n  var lastPosition = 0;\n\n  $('.cbp-header[role=\"navigation\"]').each(function() {\n    $(window).on('scroll', function() {\n      var currentPosition = $(this).scrollTop();\n\n      if (!lastPosition) {\n        lastPosition = currentPosition;\n        return;\n      }\n\n      if (lastPosition > currentPosition) {\n        $('.cbp-header').removeClass('disappear');\n        $('.app-header').removeClass('top');\n        $('.sidebar').removeClass('after-header').addClass('after-double-header');\n      } else {\n        $('.cbp-header').addClass('disappear');\n        $('.app-header').addClass('top');\n        $('.sidebar').removeClass('after-double-header').addClass('after-header');\n\n        // hida all menu items from the header\n        $('.cbp-header .dropdown.open').removeClass('open');\n        $('.app-header .dropdown.open').removeClass('open');\n      }\n\n      lastPosition = currentPosition;\n    });\n  });\n\n}($));\n\n(function() {\n\t'use strict';\n\n\t$('[data-dismiss=\"tag\"]').each(function(idx, el) {\n\t\t$(el).on('click', function(ev) {\n\t\t\t$(ev.currentTarget.parentElement).remove();\n\t\t});\n\t});\n}($));\n\n(function($) {\n\t'use strict';\n\t/**\n\t *\n\t * We currently only support selectize and select2.  If you want more select third party lib support, contribute!!!!!\n\t * See room for improvements...CONTRIBUTE, CONTRIBUTE, CONTRIBUTE!\n\t * Contact the Common Framework UI Group for more details or see our confluence page.\n\t *\n\t */\n\tlet getDirty = (idx, el) => {\n\t\tif (el !== undefined && $(el).children('select').length > 0) {\n\t\t\t$($(el).children('select').get(0)).change((ev) => {\n\t\t\t\tlet option = $(ev.currentTarget).find('option:selected').val();\n\t\t\t\tlet action = (option && option.length > 0) ? 'addClass' : 'removeClass';\n\t\t\t\t$(el)[action]('is-dirty');\n\t\t\t});\n\t\t}\n\t};\n\t$('.selectize-field').each(getDirty);\n\t$('.select2-field').each(getDirty);\n}($));\n"],"sourceRoot":"/source/"}