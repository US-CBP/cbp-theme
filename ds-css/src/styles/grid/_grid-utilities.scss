@use "../base" as mixins;

/*
  This class allows element to span all coloumns
  for all breakpoints.
*/
.cbp-col-full {
  grid-column: 1 / -1;
}

/*
  This mixin generates all gris utility classes
  for all responsive sizes.
*/
@mixin cbpGridColSpan ($start, $sz:"") {
  /* Max column width is twelve. */
  $columnCount: 12;
  /* Offset used as cssgrids goes from 1 - 13 | 1 - 9 | 1-5 */
  $offset: 1;
  /* Passed in size argument for responsive size. */
  $size: $sz;
  @for $i from 1 through $columnCount {
    @if $start < 2 {
      .cbp-col#{$sz}-#{$i} {
        grid-column: #{$start} / span #{$i} !important;
      }
    }
    @else {
      .cbp-col#{$sz}-#{($start - $offset)}-#{$i} {
        @if $i <= $columnCount - ($start - $offset) {
          grid-column: #{$start} / span #{$i} !important;
        }
        @else {
          grid-column: #{$start} / -1 !important;
        }
      }
    }
  }

}

@for $i from 1 through 12 {
  @include cbpGridColSpan($start: $i);
}

@include mixins.tablet-portrait-view {
  @for $i from 1 through 12 {
    @include cbpGridColSpan($start: $i, $sz: "-md");
  }
}

@include mixins.tablet-landscape-view {
  @for $i from 1 through 12 {
    @include cbpGridColSpan($start: $i, $sz: "-lg");
  }
}

@include mixins.large-desktop-view {
  @for $i from 1 through 12 {
    @include cbpGridColSpan($start: $i, $sz: "-xl");
  }
}
